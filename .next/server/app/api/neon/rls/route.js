"use strict";(()=>{var e={};e.id=432,e.ids=[432],e.modules={53524:e=>{e.exports=require("@prisma/client")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},61212:e=>{e.exports=require("async_hooks")},78893:e=>{e.exports=require("buffer")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},92048:e=>{e.exports=require("fs")},32615:e=>{e.exports=require("http")},35240:e=>{e.exports=require("https")},98216:e=>{e.exports=require("net")},19801:e=>{e.exports=require("os")},55315:e=>{e.exports=require("path")},76162:e=>{e.exports=require("stream")},74026:e=>{e.exports=require("string_decoder")},82452:e=>{e.exports=require("tls")},17360:e=>{e.exports=require("url")},21764:e=>{e.exports=require("util")},71568:e=>{e.exports=require("zlib")},60191:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>$,patchFetch:()=>N,requestAsyncStorage:()=>y,routeModule:()=>g,serverHooks:()=>U,staticGenerationAsyncStorage:()=>S});var s={};r.r(s),r.d(s,{DELETE:()=>h,GET:()=>w,POST:()=>E});var a=r(49303),n=r(88716),i=r(60670),o=r(87070),u=r(90455),c=r(53524);function l(){let e=new c.PrismaClient;return e.$use(async(t,r)=>{if(["AuditLog","_prisma_migrations"].includes(t.model||""))return r(t);if(["create","update","delete","findMany","findFirst","findUnique"].includes(t.action))try{let r=await e.$queryRaw`SELECT current_setting('app.current_user_id', true) as user_id`;if(!r[0]?.user_id||""===r[0].user_id)throw console.warn(`RLS Warning: No user context set for ${t.action} on ${t.model}`),Error("User context required for database operations")}catch(e){console.error("RLS Context Check Error:",e)}return r(t)}),e.setUserContext=async function(e){await this.$executeRaw`SELECT set_current_user(${e.userId}, ${e.userEmail||null})`},e.clearUserContext=async function(){await this.$executeRaw`SELECT clear_current_user()`},e.withUserContext=async function(e,t){try{return await this.setUserContext(e),await t()}finally{await this.clearUserContext()}},e}async function p(){let e=l();try{let t=await e.$queryRaw`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public' 
      AND rowsecurity = true
      ORDER BY tablename
    `,r=await e.$queryRaw`
      SELECT COUNT(*) as count
      FROM pg_policies 
      WHERE schemaname = 'public'
    `,s=t.map(e=>e.tablename),a=["User","Patient","Appointment","PainPoint","MetricResult","SoapNote"].every(e=>s.includes(e));return{tablesWithRLS:s,policiesCount:Number(r[0]?.count||0),isConfigured:a}}finally{await e.$disconnect()}}async function d(e){let t=l();try{let{userId:r,tableName:s,operation:a,limit:n=100,offset:i=0}=e,o="WHERE 1=1",u=[];r&&(o+=` AND user_id = $${u.length+1}`,u.push(r)),s&&(o+=` AND table_name = $${u.length+1}`,u.push(s)),a&&(o+=` AND operation = $${u.length+1}`,u.push(a));let c=`
      SELECT * FROM "AuditLog" 
      ${o}
      ORDER BY timestamp DESC 
      LIMIT $${u.length+1} 
      OFFSET $${u.length+2}
    `;return u.push(n,i),await t.$queryRawUnsafe(c,...u)}finally{await t.$disconnect()}}l();var m=r(92048),R=r.n(m),f=r(55315),x=r.n(f);async function w(e){try{let t=await (0,u.I8)();if(!t?.user)return o.NextResponse.json({error:"Authentication required"},{status:401});if("Admin"!==t.user.role)return o.NextResponse.json({error:"Admin access required"},{status:403});let{searchParams:r}=new URL(e.url);switch(r.get("action")){case"status":let s=await p();return o.NextResponse.json({success:!0,data:s});case"audit":let a=r.get("userId")||void 0,n=r.get("tableName")||void 0,i=r.get("operation")||void 0,c=parseInt(r.get("limit")||"100"),m=parseInt(r.get("offset")||"0"),R=await d({userId:a,tableName:n,operation:i,limit:c,offset:m});return o.NextResponse.json({success:!0,data:R,pagination:{limit:c,offset:m,hasMore:R.length===c}});case"policies":let f=l();try{let e=await f.$queryRaw`
            SELECT 
              schemaname,
              tablename,
              policyname,
              permissive,
              roles,
              cmd,
              qual,
              with_check
            FROM pg_policies 
            WHERE schemaname = 'public'
            ORDER BY tablename, policyname
          `;return o.NextResponse.json({success:!0,data:e})}finally{await f.$disconnect()}case"stats":let x=`
          SELECT 
            user_role,
            table_name,
            operation,
            COUNT(*) as operation_count,
            MAX(timestamp) as last_access
          FROM "AuditLog"
          WHERE timestamp >= CURRENT_DATE - INTERVAL '7 days'
          GROUP BY user_role, table_name, operation
          ORDER BY operation_count DESC
          LIMIT 50
        `,w=l();try{let e=await w.$queryRawUnsafe(x);return o.NextResponse.json({success:!0,data:e})}finally{await w.$disconnect()}default:return o.NextResponse.json({error:"Invalid action. Use: status, audit, policies, or stats"},{status:400})}}catch(e){return console.error("RLS API Error:",e),o.NextResponse.json({error:"Internal server error",details:void 0},{status:500})}}async function E(e){try{let t=await (0,u.I8)();if(!t?.user)return o.NextResponse.json({error:"Authentication required"},{status:401});if("Admin"!==t.user.role)return o.NextResponse.json({error:"Admin access required"},{status:403});let{action:r,force:s=!1}=await e.json();switch(r){case"setup":if(!s){let e=await p();if(e.isConfigured)return o.NextResponse.json({success:!1,error:"RLS is already configured. Use force=true to reconfigure.",data:e})}let a=x().join(process.cwd(),"scripts","setup-rls.sql");if(!R().existsSync(a))return o.NextResponse.json({error:"RLS setup script not found"},{status:404});let n=R().readFileSync(a,"utf-8").split(";").map(e=>e.trim()).filter(e=>e.length>0&&!e.startsWith("--")&&!e.startsWith("PRINT")),i=l(),c=[],d=[];try{for(let e=0;e<n.length;e++){let t=n[e];try{await i.$executeRawUnsafe(t),c.push({statement:e+1,status:"success"})}catch(a){let r=a instanceof Error?a.message:"Unknown error";if(d.push({statement:e+1,error:r,sql:t.substring(0,100)+"..."}),!s&&r.includes("already exists"))continue}}let e=await p();return o.NextResponse.json({success:0===d.length||e.isConfigured,message:`RLS setup completed. ${c.length} statements executed successfully.`,data:{executed:c.length,errors:d.length,finalStatus:e},errors:d.length>0?d:void 0})}finally{await i.$disconnect()}case"reset":let m=l();try{let e=await m.$queryRaw`
            SELECT policyname, tablename 
            FROM pg_policies 
            WHERE schemaname = 'public'
          `;for(let t of e)await m.$executeRawUnsafe(`DROP POLICY IF EXISTS "${t.policyname}" ON "${t.tablename}"`);let t=["User","Patient","Appointment","PainPoint","MetricResult","SoapNote","AuditLog"];for(let e of t)await m.$executeRawUnsafe(`ALTER TABLE "${e}" DISABLE ROW LEVEL SECURITY`);return await m.$executeRawUnsafe("DROP FUNCTION IF EXISTS set_current_user(text, text)"),await m.$executeRawUnsafe("DROP FUNCTION IF EXISTS clear_current_user()"),await m.$executeRawUnsafe("DROP FUNCTION IF EXISTS get_current_user_role()"),await m.$executeRawUnsafe("DROP FUNCTION IF EXISTS audit_trigger_function()"),await m.$executeRawUnsafe('DROP TABLE IF EXISTS "AuditLog"'),o.NextResponse.json({success:!0,message:"RLS configuration reset successfully",data:{policiesRemoved:e.length,tablesUpdated:t.length}})}finally{await m.$disconnect()}case"test":let f=l();try{let e=[];try{await f.setUserContext({userId:"test-user-123",userEmail:"test@example.com"}),e.push({test:"Set user context",status:"success"})}catch(t){e.push({test:"Set user context",status:"failed",error:t instanceof Error?t.message:String(t)})}try{let t=await f.$queryRaw`SELECT current_setting('app.current_user_id', true) as user_id`;e.push({test:"Get current user",status:"success",data:t})}catch(t){e.push({test:"Get current user",status:"failed",error:t instanceof Error?t.message:String(t)})}try{await f.clearUserContext(),e.push({test:"Clear user context",status:"success"})}catch(t){e.push({test:"Clear user context",status:"failed",error:t instanceof Error?t.message:String(t)})}return o.NextResponse.json({success:!0,message:"RLS tests completed",data:e})}finally{await f.$disconnect()}default:return o.NextResponse.json({error:"Invalid action. Use: setup, reset, or test"},{status:400})}}catch(e){return console.error("RLS Setup Error:",e),o.NextResponse.json({error:"Internal server error",details:void 0},{status:500})}}async function h(e){try{let t=await (0,u.I8)();if(!t?.user)return o.NextResponse.json({error:"Authentication required"},{status:401});if("Admin"!==t.user.role)return o.NextResponse.json({error:"Admin access required"},{status:403});let{searchParams:r}=new URL(e.url),s=parseInt(r.get("days")||"30"),a=l();try{let e=await a.$executeRawUnsafe(`DELETE FROM "AuditLog" WHERE timestamp < CURRENT_DATE - INTERVAL '${s} days'`);return o.NextResponse.json({success:!0,message:`Audit logs older than ${s} days have been cleaned up`,data:{deletedRecords:e,retentionDays:s}})}finally{await a.$disconnect()}}catch(e){return console.error("Audit Cleanup Error:",e),o.NextResponse.json({error:"Internal server error",details:void 0},{status:500})}}let g=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/neon/rls/route",pathname:"/api/neon/rls",filename:"route",bundlePath:"app/api/neon/rls/route"},resolvedPagePath:"C:\\Users\\amand\\Rafael\\aifisio\\fisioflow-aistudio\\app\\api\\neon\\rls\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:y,staticGenerationAsyncStorage:S,serverHooks:U}=g,$="/api/neon/rls/route";function N(){return(0,i.patchFetch)({serverHooks:U,staticGenerationAsyncStorage:S})}},90455:(e,t,r)=>{r.d(t,{I8:()=>l,handlers:()=>p,ts:()=>R});var s=r(96708),a=r(80772),n=r(7585),i=r(49237),o=r(42023),u=r.n(o);let c={adapter:(0,n.N)(i._B),providers:[(0,a.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;try{let t=await i._B.user.findUnique({where:{email:e.email}});if(!t||!t.passwordHash||!await u().compare(e.password,t.passwordHash))return null;return{id:t.id,email:t.email,name:t.name,role:t.role,avatarUrl:t.avatarUrl||void 0}}catch(e){return console.error("Auth error:",e),null}}})],session:{strategy:"jwt",maxAge:2592e3},jwt:{maxAge:2592e3},callbacks:{jwt:async({token:e,user:t})=>(t&&(e.role=t.role,e.avatarUrl=t.avatarUrl),e),session:async({session:e,token:t})=>(t&&(e.user.id=t.sub,e.user.role=t.role,e.user.avatarUrl=t.avatarUrl),e)},pages:{signIn:"/login",error:"/login"},secret:process.env.NEXTAUTH_SECRET},{auth:l,handlers:p,signIn:d,signOut:m}=(0,s.ZP)(c);async function R(){let e=await l();return e?.user||null}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[216,237],()=>r(60191));module.exports=s})();