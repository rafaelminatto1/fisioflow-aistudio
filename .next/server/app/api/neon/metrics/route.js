(()=>{var e={};e.id=882,e.ids=[882],e.modules={53524:e=>{"use strict";e.exports=require("@prisma/client")},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{"use strict";e.exports=require("buffer")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},32615:e=>{"use strict";e.exports=require("http")},35240:e=>{"use strict";e.exports=require("https")},98216:e=>{"use strict";e.exports=require("net")},76162:e=>{"use strict";e.exports=require("stream")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},71568:e=>{"use strict";e.exports=require("zlib")},58359:()=>{},93739:()=>{},70985:(e,t,r)=>{"use strict";r.r(t),r.d(t,{originalPathname:()=>I,patchFetch:()=>w,requestAsyncStorage:()=>d,routeModule:()=>l,serverHooks:()=>m,staticGenerationAsyncStorage:()=>h});var s={};r.r(s),r.d(s,{GET:()=>p,POST:()=>u});var n=r(49303),a=r(88716),o=r(60670),i=r(87070),c=r(37502);async function p(e){try{let{searchParams:t}=new URL(e.url),r=t.get("type")||"all",s=e.headers.get("authorization");if(!s||!s.startsWith("Bearer "))return i.NextResponse.json({error:"Missing or invalid authorization header"},{status:401});if(s.split(" ")[1]!==process.env.NEON_API_KEY)return i.NextResponse.json({error:"Invalid API key"},{status:401});switch(r){case"health":let n=await (0,c.Ve)();return i.NextResponse.json({success:!0,data:n,timestamp:new Date().toISOString()});case"metrics":let a=await (0,c.eK)();return i.NextResponse.json({success:!0,data:a,timestamp:new Date().toISOString()});case"project":let o=await fetch(`${c.qL.baseUrl}/projects/${c.qL.projectId}`,{headers:{Authorization:`Bearer ${c.qL.apiKey}`,"Content-Type":"application/json"}});if(!o.ok)throw Error(`Neon API error: ${o.statusText}`);let p=await o.json();return i.NextResponse.json({success:!0,data:p,timestamp:new Date().toISOString()});case"branches":let u=await fetch(`${c.qL.baseUrl}/projects/${c.qL.projectId}/branches`,{headers:{Authorization:`Bearer ${c.qL.apiKey}`,"Content-Type":"application/json"}});if(!u.ok)throw Error(`Neon API error: ${u.statusText}`);let l=await u.json();return i.NextResponse.json({success:!0,data:l,timestamp:new Date().toISOString()});case"endpoints":let d=await fetch(`${c.qL.baseUrl}/projects/${c.qL.projectId}/endpoints`,{headers:{Authorization:`Bearer ${c.qL.apiKey}`,"Content-Type":"application/json"}});if(!d.ok)throw Error(`Neon API error: ${d.statusText}`);let h=await d.json();return i.NextResponse.json({success:!0,data:h,timestamp:new Date().toISOString()});default:let[m,I]=await Promise.all([(0,c.Ve)(),(0,c.eK)()]),w=null;try{let e=await fetch(`${c.qL.baseUrl}/projects/${c.qL.projectId}`,{headers:{Authorization:`Bearer ${c.qL.apiKey}`,"Content-Type":"application/json"}});e.ok&&(w=await e.json())}catch(e){console.warn("Failed to fetch project info:",e)}return i.NextResponse.json({success:!0,data:{health:m,metrics:I,project:w,config:{projectId:c.qL.projectId,branchId:c.qL.branchId,endpointId:c.qL.endpointId}},timestamp:new Date().toISOString()})}}catch(e){return console.error("Neon metrics API error:",e),i.NextResponse.json({success:!1,error:"Failed to fetch Neon metrics",details:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()},{status:500})}}async function u(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return i.NextResponse.json({error:"Missing or invalid authorization header"},{status:401});if(t.split(" ")[1]!==process.env.NEON_API_KEY)return i.NextResponse.json({error:"Invalid API key"},{status:401});let{action:r}=await e.json();switch(r){case"health_check":let s=await (0,c.Ve)();return i.NextResponse.json({success:!0,action:"health_check",data:s,timestamp:new Date().toISOString()});case"collect_metrics":let n=await (0,c.eK)();return i.NextResponse.json({success:!0,action:"collect_metrics",data:n,timestamp:new Date().toISOString()});default:return i.NextResponse.json({error:"Invalid action. Supported actions: health_check, collect_metrics"},{status:400})}}catch(e){return console.error("Neon metrics POST API error:",e),i.NextResponse.json({success:!1,error:"Failed to execute metrics action",details:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()},{status:500})}}let l=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/neon/metrics/route",pathname:"/api/neon/metrics",filename:"route",bundlePath:"app/api/neon/metrics/route"},resolvedPagePath:"C:\\Users\\amand\\Rafael\\aifisio\\fisioflow-aistudio\\app\\api\\neon\\metrics\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:d,staticGenerationAsyncStorage:h,serverHooks:m}=l,I="/api/neon/metrics/route";function w(){return(0,o.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:h})}},37502:(e,t,r)=>{"use strict";r.d(t,{Ve:()=>u,_B:()=>c,eK:()=>l,qL:()=>p});var s=r(62237),n=r(53524),a=r(34893);s.vK.webSocketConstructor=a.ZP,s.vK.useSecureWebSocket=!0,s.vK.pipelineConnect=!1;let o=process.env.DATABASE_URL,i=new s.Kg({connectionString:o,max:parseInt(process.env.DATABASE_POOL_SIZE||"20"),idleTimeoutMillis:parseInt(process.env.DATABASE_POOL_IDLE_TIMEOUT||"600000"),connectionTimeoutMillis:parseInt(process.env.DATABASE_POOL_TIMEOUT||"30000"),statement_timeout:parseInt(process.env.DATABASE_STATEMENT_TIMEOUT||"60000"),query_timeout:parseInt(process.env.DATABASE_QUERY_TIMEOUT||"30000")}),c=new n.PrismaClient({log:["error"],errorFormat:"pretty"}),p={apiKey:process.env.NEON_API_KEY,projectId:process.env.NEON_PROJECT_ID,branchId:process.env.NEON_BRANCH_ID,endpointId:process.env.NEON_ENDPOINT_ID,baseUrl:"https://console.neon.tech/api/v2"};async function u(){let e=Date.now();try{await c.$queryRaw`SELECT 1`;let t=Date.now()-e;return{status:"healthy",latency:t,poolStats:{totalConnections:i.totalCount,idleConnections:i.idleCount,waitingClients:i.waitingCount},timestamp:new Date().toISOString()}}catch(t){return{status:"unhealthy",latency:Date.now()-e,poolStats:{totalConnections:i.totalCount,idleConnections:i.idleCount,waitingClients:i.waitingCount},timestamp:new Date().toISOString()}}}async function l(){try{let[e,t,r]=await Promise.all([c.$queryRaw`
        SELECT 
          count(*) as total_connections,
          count(*) FILTER (WHERE state = 'active') as active_connections,
          count(*) FILTER (WHERE state = 'idle') as idle_connections
        FROM pg_stat_activity
        WHERE datname = current_database()
      `,c.$queryRaw`
        SELECT pg_size_pretty(pg_database_size(current_database())) as size
      `,c.$queryRaw`
        SELECT count(*) as active_queries
        FROM pg_stat_activity 
        WHERE state = 'active' AND query != '<IDLE>'
      `]);return{connectionStats:Array.isArray(e)?e[0]:e,databaseSize:Array.isArray(t)?t[0]:t,activeQueries:Array.isArray(r)?r[0]:r,poolStats:{totalConnections:i.totalCount,idleConnections:i.idleCount,waitingClients:i.waitingCount},timestamp:new Date().toISOString()}}catch(e){throw e}}async function d(){try{await c.$disconnect(),await i.end()}catch(e){}}parseInt(process.env.NEON_AUTO_SUSPEND_DELAY||"300"),process.on("SIGINT",d),process.on("SIGTERM",d),process.on("beforeExit",d)}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[216],()=>r(70985));module.exports=s})();