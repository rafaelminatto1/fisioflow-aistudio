(()=>{var e={};e.id=714,e.ids=[714],e.modules={53524:e=>{"use strict";e.exports=require("@prisma/client")},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{"use strict";e.exports=require("buffer")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},32615:e=>{"use strict";e.exports=require("http")},35240:e=>{"use strict";e.exports=require("https")},98216:e=>{"use strict";e.exports=require("net")},76162:e=>{"use strict";e.exports=require("stream")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},71568:e=>{"use strict";e.exports=require("zlib")},58359:()=>{},93739:()=>{},62619:(e,t,s)=>{"use strict";s.r(t),s.d(t,{originalPathname:()=>_,patchFetch:()=>j,requestAsyncStorage:()=>I,routeModule:()=>m,serverHooks:()=>S,staticGenerationAsyncStorage:()=>h});var n={};s.r(n),s.d(n,{GET:()=>u,POST:()=>d,PUT:()=>l});var r=s(49303),a=s(88716),o=s(60670),i=s(87070),c=s(37502);async function p(e,t={}){let s=`${c.qL.baseUrl}${e}`,n=await fetch(s,{...t,headers:{Authorization:`Bearer ${c.qL.apiKey}`,"Content-Type":"application/json",...t.headers}});if(!n.ok){let e=await n.text();throw Error(`Neon API error (${n.status}): ${e}`)}return n.json()}async function u(e){try{let{searchParams:t}=new URL(e.url),s=t.get("operation"),n=e.headers.get("authorization");if(!n||!n.startsWith("Bearer "))return i.NextResponse.json({error:"Missing or invalid authorization header"},{status:401});if(n.split(" ")[1]!==process.env.NEON_API_KEY)return i.NextResponse.json({error:"Invalid API key"},{status:401});switch(s){case"project_info":let r=await p(`/projects/${c.qL.projectId}`);return i.NextResponse.json({success:!0,data:r,timestamp:new Date().toISOString()});case"branches":let a=await p(`/projects/${c.qL.projectId}/branches`);return i.NextResponse.json({success:!0,data:a,timestamp:new Date().toISOString()});case"endpoints":let o=await p(`/projects/${c.qL.projectId}/endpoints`);return i.NextResponse.json({success:!0,data:o,timestamp:new Date().toISOString()});case"databases":let u=await p(`/projects/${c.qL.projectId}/branches/${c.qL.branchId}/databases`);return i.NextResponse.json({success:!0,data:u,timestamp:new Date().toISOString()});case"operations":let d=await p(`/projects/${c.qL.projectId}/operations`);return i.NextResponse.json({success:!0,data:d,timestamp:new Date().toISOString()});case"consumption":let l=await p(`/projects/${c.qL.projectId}/consumption`);return i.NextResponse.json({success:!0,data:l,timestamp:new Date().toISOString()});default:return i.NextResponse.json({error:"Invalid operation. Supported operations: project_info, branches, endpoints, databases, operations, consumption"},{status:400})}}catch(e){return console.error("Neon management GET API error:",e),i.NextResponse.json({success:!1,error:"Failed to fetch management data",details:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()},{status:500})}}async function d(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return i.NextResponse.json({error:"Missing or invalid authorization header"},{status:401});if(t.split(" ")[1]!==process.env.NEON_API_KEY)return i.NextResponse.json({error:"Invalid API key"},{status:401});let{operation:s,params:n={}}=await e.json();switch(s){case"create_branch":let{name:r,parent_id:a}=n;if(!r)return i.NextResponse.json({error:"Branch name is required"},{status:400});let o=await p(`/projects/${c.qL.projectId}/branches`,{method:"POST",body:JSON.stringify({branch:{name:r,parent_id:a||c.qL.branchId}})});return i.NextResponse.json({success:!0,operation:"create_branch",data:o,timestamp:new Date().toISOString()});case"delete_branch":let{branch_id:u}=n;if(!u)return i.NextResponse.json({error:"Branch ID is required"},{status:400});return await p(`/projects/${c.qL.projectId}/branches/${u}`,{method:"DELETE"}),i.NextResponse.json({success:!0,operation:"delete_branch",message:`Branch ${u} deleted successfully`,timestamp:new Date().toISOString()});case"scale_endpoint":let{endpoint_id:d,compute_units:l}=n;if(!d||!l)return i.NextResponse.json({error:"Endpoint ID and compute units are required"},{status:400});let m=await p(`/projects/${c.qL.projectId}/endpoints/${d}`,{method:"PATCH",body:JSON.stringify({endpoint:{compute_units:parseFloat(l)}})});return i.NextResponse.json({success:!0,operation:"scale_endpoint",data:m,timestamp:new Date().toISOString()});case"suspend_endpoint":let{endpoint_id:I}=n;if(!I)return i.NextResponse.json({error:"Endpoint ID is required"},{status:400});let h=await p(`/projects/${c.qL.projectId}/endpoints/${I}/suspend`,{method:"POST"});return i.NextResponse.json({success:!0,operation:"suspend_endpoint",data:h,timestamp:new Date().toISOString()});case"resume_endpoint":let{endpoint_id:S}=n;if(!S)return i.NextResponse.json({error:"Endpoint ID is required"},{status:400});let _=await p(`/projects/${c.qL.projectId}/endpoints/${S}/start`,{method:"POST"});return i.NextResponse.json({success:!0,operation:"resume_endpoint",data:_,timestamp:new Date().toISOString()});case"create_database":let{database_name:j,owner_name:w}=n;if(!j)return i.NextResponse.json({error:"Database name is required"},{status:400});let g=await p(`/projects/${c.qL.projectId}/branches/${c.qL.branchId}/databases`,{method:"POST",body:JSON.stringify({database:{name:j,owner_name:w||"neondb_owner"}})});return i.NextResponse.json({success:!0,operation:"create_database",data:g,timestamp:new Date().toISOString()});case"backup_branch":let N=`backup-${new Date().toISOString().slice(0,19).replace(/[:.]/g,"-")}`,E=await p(`/projects/${c.qL.projectId}/branches`,{method:"POST",body:JSON.stringify({branch:{name:N,parent_id:c.qL.branchId}})});return i.NextResponse.json({success:!0,operation:"backup_branch",data:E,message:`Backup created with name: ${N}`,timestamp:new Date().toISOString()});default:return i.NextResponse.json({error:"Invalid operation",supportedOperations:["create_branch","delete_branch","scale_endpoint","suspend_endpoint","resume_endpoint","create_database","backup_branch"]},{status:400})}}catch(e){return console.error("Neon management POST API error:",e),i.NextResponse.json({success:!1,error:"Failed to execute management operation",details:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()},{status:500})}}async function l(e){try{let t=e.headers.get("authorization");if(!t||!t.startsWith("Bearer "))return i.NextResponse.json({error:"Missing or invalid authorization header"},{status:401});if(t.split(" ")[1]!==process.env.NEON_API_KEY)return i.NextResponse.json({error:"Invalid API key"},{status:401});let{operation:s,params:n={}}=await e.json();switch(s){case"update_project":let{name:r,settings:a}=n,o=await p(`/projects/${c.qL.projectId}`,{method:"PATCH",body:JSON.stringify({project:{name:r,settings:a}})});return i.NextResponse.json({success:!0,operation:"update_project",data:o,timestamp:new Date().toISOString()});case"update_endpoint":let{endpoint_id:u,endpoint_settings:d}=n;if(!u)return i.NextResponse.json({error:"Endpoint ID is required"},{status:400});let l=await p(`/projects/${c.qL.projectId}/endpoints/${u}`,{method:"PATCH",body:JSON.stringify({endpoint:d})});return i.NextResponse.json({success:!0,operation:"update_endpoint",data:l,timestamp:new Date().toISOString()});default:return i.NextResponse.json({error:"Invalid operation",supportedOperations:["update_project","update_endpoint"]},{status:400})}}catch(e){return console.error("Neon management PUT API error:",e),i.NextResponse.json({success:!1,error:"Failed to update management settings",details:e instanceof Error?e.message:"Unknown error",timestamp:new Date().toISOString()},{status:500})}}let m=new r.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/neon/management/route",pathname:"/api/neon/management",filename:"route",bundlePath:"app/api/neon/management/route"},resolvedPagePath:"C:\\Users\\amand\\Rafael\\aifisio\\fisioflow-aistudio\\app\\api\\neon\\management\\route.ts",nextConfigOutput:"standalone",userland:n}),{requestAsyncStorage:I,staticGenerationAsyncStorage:h,serverHooks:S}=m,_="/api/neon/management/route";function j(){return(0,o.patchFetch)({serverHooks:S,staticGenerationAsyncStorage:h})}},37502:(e,t,s)=>{"use strict";s.d(t,{Ve:()=>m,eK:()=>I,qL:()=>l,vK:()=>i});var n=s(62237),r=s(96324),a=s(53524),o=s(34893);n.vK.webSocketConstructor=o.ZP,n.vK.useSecureWebSocket=!0,n.vK.pipelineConnect=!1;let i=n.vK,c=process.env.DATABASE_URL,p=new n.Kg({connectionString:c,max:parseInt(process.env.DATABASE_POOL_SIZE||"20"),idleTimeoutMillis:parseInt(process.env.DATABASE_POOL_IDLE_TIMEOUT||"600000"),connectionTimeoutMillis:parseInt(process.env.DATABASE_POOL_TIMEOUT||"30000"),statementTimeout:parseInt(process.env.DATABASE_STATEMENT_TIMEOUT||"60000"),queryTimeout:parseInt(process.env.DATABASE_QUERY_TIMEOUT||"30000")}),u=new r.b(p),d=new a.PrismaClient({adapter:u,log:["error"],errorFormat:"pretty"}),l={apiKey:process.env.NEON_API_KEY,projectId:process.env.NEON_PROJECT_ID,branchId:process.env.NEON_BRANCH_ID,endpointId:process.env.NEON_ENDPOINT_ID,baseUrl:"https://console.neon.tech/api/v2"};async function m(){let e=Date.now();try{await d.$queryRaw`SELECT 1`;let t=Date.now()-e;return{status:"healthy",latency:t,poolStats:{totalConnections:p.totalCount,idleConnections:p.idleCount,waitingClients:p.waitingCount},timestamp:new Date().toISOString()}}catch(t){return{status:"unhealthy",latency:Date.now()-e,poolStats:{totalConnections:p.totalCount,idleConnections:p.idleCount,waitingClients:p.waitingCount},timestamp:new Date().toISOString()}}}async function I(){try{let[e,t,s]=await Promise.all([d.$queryRaw`
        SELECT 
          count(*) as total_connections,
          count(*) FILTER (WHERE state = 'active') as active_connections,
          count(*) FILTER (WHERE state = 'idle') as idle_connections
        FROM pg_stat_activity
        WHERE datname = current_database()
      `,d.$queryRaw`
        SELECT pg_size_pretty(pg_database_size(current_database())) as size
      `,d.$queryRaw`
        SELECT count(*) as active_queries
        FROM pg_stat_activity 
        WHERE state = 'active' AND query != '<IDLE>'
      `]);return{connectionStats:Array.isArray(e)?e[0]:e,databaseSize:Array.isArray(t)?t[0]:t,activeQueries:Array.isArray(s)?s[0]:s,poolStats:{totalConnections:p.totalCount,idleConnections:p.idleCount,waitingClients:p.waitingCount},timestamp:new Date().toISOString()}}catch(e){throw e}}async function h(){try{await d.$disconnect(),await p.end()}catch(e){}}parseInt(process.env.NEON_AUTO_SUSPEND_DELAY||"300"),process.on("SIGINT",h),process.on("SIGTERM",h),process.on("beforeExit",h)}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),n=t.X(0,[216],()=>s(62619));module.exports=n})();