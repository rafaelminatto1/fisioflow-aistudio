(()=>{var e={};e.id=62,e.ids=[62],e.modules={53524:e=>{"use strict";e.exports=require("@prisma/client")},72934:e=>{"use strict";e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{"use strict";e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{"use strict";e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},61212:e=>{"use strict";e.exports=require("async_hooks")},78893:e=>{"use strict";e.exports=require("buffer")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},92048:e=>{"use strict";e.exports=require("fs")},32615:e=>{"use strict";e.exports=require("http")},35240:e=>{"use strict";e.exports=require("https")},98216:e=>{"use strict";e.exports=require("net")},19801:e=>{"use strict";e.exports=require("os")},55315:e=>{"use strict";e.exports=require("path")},76162:e=>{"use strict";e.exports=require("stream")},74026:e=>{"use strict";e.exports=require("string_decoder")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},21764:e=>{"use strict";e.exports=require("util")},71568:e=>{"use strict";e.exports=require("zlib")},58359:()=>{},93739:()=>{},35175:(e,t,r)=>{"use strict";r.r(t),r.d(t,{originalPathname:()=>L,patchFetch:()=>_,requestAsyncStorage:()=>w,routeModule:()=>h,serverHooks:()=>I,staticGenerationAsyncStorage:()=>T});var s={};r.r(s),r.d(s,{DELETE:()=>A,GET:()=>m,POST:()=>S,PUT:()=>R});var i=r(49303),a=r(88716),n=r(60670),o=r(87070),c=r(90455),u=r(37502);class l{constructor(){this.prisma=u.vK.prisma}async getSecurityPolicies(){try{return(await this.prisma.$queryRaw`
        SELECT 
          schemaname,
          tablename,
          policyname,
          permissive,
          roles,
          cmd,
          qual,
          with_check
        FROM pg_policies 
        WHERE schemaname = 'public'
        ORDER BY tablename, policyname;
      `).map(e=>({name:e.policyname,table:e.tablename,operation:e.cmd,condition:e.qual||e.with_check||"",description:`Policy for ${e.tablename} - ${e.cmd}`}))}catch(e){return console.error("Error fetching security policies:",e),[]}}async checkRLSStatus(){try{let e=await this.prisma.$queryRaw`
        SELECT 
          tablename,
          rowsecurity
        FROM pg_tables 
        WHERE schemaname = 'public'
        AND tablename NOT LIKE 'pg_%'
        AND tablename NOT LIKE '_prisma_%'
        ORDER BY tablename;
      `,t={};return e.forEach(e=>{t[e.tablename]=e.rowsecurity}),t}catch(e){return console.error("Error checking RLS status:",e),{}}}async getAuditLogs(e=100){try{return(await this.prisma.$queryRaw`
        SELECT 
          id,
          "userId",
          action,
          "tableName",
          "recordId",
          "ipAddress",
          "userAgent",
          metadata,
          "createdAt"
        FROM "SecurityAuditLog"
        ORDER BY "createdAt" DESC
        LIMIT ${e};
      `).map(e=>({id:e.id,userId:e.userId,action:e.action,tableName:e.tableName,recordId:e.recordId,ipAddress:e.ipAddress,userAgent:e.userAgent,metadata:e.metadata,createdAt:new Date(e.createdAt)}))}catch(e){return console.error("Error fetching audit logs:",e),[]}}async logSecurityEvent(e,t,r,s,i){try{let a=i?.headers.get("x-forwarded-for")||i?.headers.get("x-real-ip")||"unknown",n=i?.headers.get("user-agent")||"unknown";await this.prisma.$executeRaw`
        SELECT log_security_event(
          ${e},
          ${t},
          ${r},
          ${s?JSON.stringify(s):null}::jsonb
        );
      `,i&&await this.prisma.$executeRaw`
          UPDATE "SecurityAuditLog" 
          SET "ipAddress" = ${a}, "userAgent" = ${n}
          WHERE action = ${e} 
          AND "createdAt" > NOW() - INTERVAL '1 minute'
          ORDER BY "createdAt" DESC
          LIMIT 1;
        `}catch(e){console.error("Error logging security event:",e)}}async getSecurityMetrics(){try{let[e,t,r]=await Promise.all([this.getSecurityPolicies(),this.getAuditLogCount(),this.getAuditLogs(10)]),s=await this.checkRLSStatus(),i=Object.values(s).filter(Boolean).length;return{totalPolicies:e.length,activePolicies:i,auditLogEntries:t,recentSecurityEvents:r,policyViolations:await this.getPolicyViolationCount(),lastSecurityCheck:new Date}}catch(e){return console.error("Error getting security metrics:",e),{totalPolicies:0,activePolicies:0,auditLogEntries:0,recentSecurityEvents:[],policyViolations:0,lastSecurityCheck:new Date}}}async getAuditLogCount(){try{let e=await this.prisma.$queryRaw`
        SELECT COUNT(*) as count FROM "SecurityAuditLog";
      `;return Number(e[0].count)}catch(e){return console.error("Error getting audit log count:",e),0}}async getPolicyViolationCount(){try{let e=await this.prisma.$queryRaw`
        SELECT COUNT(*) as count 
        FROM "SecurityAuditLog" 
        WHERE action LIKE '%VIOLATION%' 
        OR action LIKE '%DENIED%'
        AND "createdAt" > NOW() - INTERVAL '24 hours';
      `;return Number(e[0].count)}catch(e){return console.error("Error getting policy violation count:",e),0}}async validateUserPermission(e,t,r,s){try{let i=await this.prisma.user.findUnique({where:{id:e},select:{role:!0}});if(!i)return await this.logSecurityEvent("PERMISSION_DENIED",r,s,{reason:"User not found",operation:t}),!1;if("Admin"===i.role)return!0;let a=await this.checkSpecificPermission(e,i.role,t,r,s);return a||await this.logSecurityEvent("PERMISSION_DENIED",r,s,{reason:"Insufficient permissions",operation:t,role:i.role}),a}catch(e){return console.error("Error validating user permission:",e),await this.logSecurityEvent("PERMISSION_ERROR",r,s,{error:e.message,operation:t}),!1}}async checkSpecificPermission(e,t,r,s,i){switch(s){case"Patient":if("PHYSIOTHERAPIST"===t){if(i)return!!await this.prisma.patient.findFirst({where:{id:i,physiotherapistId:e}});return"SELECT"===r||"INSERT"===r}if("PATIENT"===t)return i===e&&("SELECT"===r||"UPDATE"===r);break;case"Appointment":if("PHYSIOTHERAPIST"===t||"PATIENT"===t){if(i)return!!await this.prisma.appointment.findFirst({where:{id:i,OR:[{patient:{physiotherapistId:e}},{patientId:e}]}});return"SELECT"===r||"INSERT"===r}}return!1}async enableRLSForTable(e){try{return await this.prisma.$executeRawUnsafe(`
        ALTER TABLE "${e}" ENABLE ROW LEVEL SECURITY;
      `),await this.logSecurityEvent("RLS_ENABLED",e,void 0,{tableName:e}),!0}catch(t){return console.error(`Error enabling RLS for table ${e}:`,t),!1}}async disableRLSForTable(e){try{return await this.prisma.$executeRawUnsafe(`
        ALTER TABLE "${e}" DISABLE ROW LEVEL SECURITY;
      `),await this.logSecurityEvent("RLS_DISABLED",e,void 0,{tableName:e,warning:"RLS disabled - security risk"}),!0}catch(t){return console.error(`Error disabling RLS for table ${e}:`,t),!1}}async clearOldAuditLogs(e){try{let t=await this.prisma.$executeRaw`
        DELETE FROM "SecurityAuditLog" 
        WHERE "createdAt" < NOW() - INTERVAL '${e} days';
      `;return await this.logSecurityEvent("AUDIT_LOG_CLEANUP","SecurityAuditLog",void 0,{daysRetention:e,deletedRecords:t}),Number(t)}catch(e){throw console.error("Error clearing old audit logs:",e),e}}}let d=new l,p={isAdmin:e=>"Admin"===e};var E=r(91585),y=r(26033);let g=E.Ry({action:E.Km(["enable_rls","disable_rls","check_permissions","log_event"]),tableName:E.Z_().optional(),recordId:E.Z_().optional(),metadata:E.IM(E.Yj()).optional()});async function m(e){try{let t=await (0,c.I8)();if(!t||!p.isAdmin(t.user.role))return await d.logSecurityEvent("UNAUTHORIZED_ACCESS","security_api",void 0,{endpoint:"/api/security",method:"GET"},e),o.NextResponse.json({error:"Unauthorized. Admin access required."},{status:403});let{searchParams:r}=new URL(e.url),s=r.get("type"),i=parseInt(r.get("limit")||"100");switch(s){case"metrics":let a=await d.getSecurityMetrics();return o.NextResponse.json({metrics:a});case"policies":let n=await d.getSecurityPolicies();return o.NextResponse.json({policies:n});case"rls-status":let u=await d.checkRLSStatus();return o.NextResponse.json({rlsStatus:u});case"audit-logs":let l=await d.getAuditLogs(i);return o.NextResponse.json({auditLogs:l});default:let[E,y,g,m]=await Promise.all([d.getSecurityMetrics(),d.getSecurityPolicies(),d.checkRLSStatus(),d.getAuditLogs(50)]);return o.NextResponse.json({metrics:E,policies:y,rlsStatus:g,auditLogs:m,timestamp:new Date().toISOString()})}}catch(t){return console.error("Security API GET error:",t),await d.logSecurityEvent("API_ERROR","security_api",void 0,{error:t instanceof Error?t.message:String(t),endpoint:"/api/security",method:"GET"},e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function S(e){try{let t=await (0,c.I8)();if(!t||!p.isAdmin(t.user.role))return await d.logSecurityEvent("UNAUTHORIZED_ACCESS","security_api",void 0,{endpoint:"/api/security",method:"POST"},e),o.NextResponse.json({error:"Unauthorized. Admin access required."},{status:403});let r=await e.json(),{action:s,tableName:i,recordId:a,metadata:n}=g.parse(r);switch(s){case"enable_rls":if(!i)return o.NextResponse.json({error:"Table name is required for enable_rls action"},{status:400});if(await d.enableRLSForTable(i))return o.NextResponse.json({success:!0,message:`RLS enabled for table ${i}`,tableName:i});return o.NextResponse.json({error:`Failed to enable RLS for table ${i}`},{status:500});case"disable_rls":if(!i)return o.NextResponse.json({error:"Table name is required for disable_rls action"},{status:400});if(await d.disableRLSForTable(i))return o.NextResponse.json({success:!0,message:`RLS disabled for table ${i}`,tableName:i,warning:"RLS disabled - this may pose security risks"});return o.NextResponse.json({error:`Failed to disable RLS for table ${i}`},{status:500});case"check_permissions":if(!i||!a)return o.NextResponse.json({error:"Table name and record ID are required for check_permissions action"},{status:400});let u=await d.validateUserPermission(t.user.id,"SELECT",i,a);return o.NextResponse.json({hasPermission:u,userId:t.user.id,tableName:i,recordId:a});case"log_event":return await d.logSecurityEvent(n?.eventType||"MANUAL_LOG",i,a,{...n,triggeredBy:t.user.id,triggeredAt:new Date().toISOString()},e),o.NextResponse.json({success:!0,message:"Security event logged successfully"});default:return o.NextResponse.json({error:`Unknown action: ${s}`},{status:400})}}catch(t){if(console.error("Security API POST error:",t),t instanceof y.jm)return o.NextResponse.json({error:"Invalid request data",details:t.errors},{status:400});return await d.logSecurityEvent("API_ERROR","security_api",void 0,{error:t instanceof Error?t.message:String(t),endpoint:"/api/security",method:"POST"},e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function R(e){try{let t=await (0,c.I8)();if(!t||!p.isAdmin(t.user.role))return await d.logSecurityEvent("UNAUTHORIZED_ACCESS","security_api",void 0,{endpoint:"/api/security",method:"PUT"},e),o.NextResponse.json({error:"Unauthorized. Admin access required."},{status:403});let{tables:r,enableRLS:s}=await e.json();if(!Array.isArray(r))return o.NextResponse.json({error:"Tables must be an array"},{status:400});let i=[];for(let e of r)try{let t;t=s?await d.enableRLSForTable(e):await d.disableRLSForTable(e),i.push({tableName:e,success:t,action:s?"enabled":"disabled"})}catch(t){i.push({tableName:e,success:!1,error:t instanceof Error?t.message:String(t),action:s?"enable_failed":"disable_failed"})}return await d.logSecurityEvent("BULK_RLS_UPDATE",void 0,void 0,{tables:r,enableRLS:s,results:i,triggeredBy:t.user.id},e),o.NextResponse.json({success:!0,message:`Bulk RLS ${s?"enable":"disable"} completed`,results:i})}catch(t){return console.error("Security API PUT error:",t),await d.logSecurityEvent("API_ERROR","security_api",void 0,{error:t instanceof Error?t.message:String(t),endpoint:"/api/security",method:"PUT"},e),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function A(e){try{let t=await (0,c.I8)();if(!t||!p.isAdmin(t.user.role))return await d.logSecurityEvent("UNAUTHORIZED_ACCESS","security_api",void 0,{endpoint:"/api/security",method:"DELETE"},e),o.NextResponse.json({error:"Unauthorized. Admin access required."},{status:403});let{searchParams:r}=new URL(e.url),s=r.get("action"),i=parseInt(r.get("days")||"30");if("clear_old_logs"===s){let r=await d.clearOldAuditLogs(i);return await d.logSecurityEvent("AUDIT_LOG_CLEANUP","SecurityAuditLog",void 0,{daysRetention:i,deletedRecords:r,triggeredBy:t.user.id},e),o.NextResponse.json({success:!0,message:`Cleared audit logs older than ${i} days`,deletedRecords:r})}return o.NextResponse.json({error:"Invalid action. Use ?action=clear_old_logs"},{status:400})}catch(t){return console.error("Security API DELETE error:",t),await d.logSecurityEvent("API_ERROR","security_api",void 0,{error:t instanceof Error?t.message:String(t),endpoint:"/api/security",method:"DELETE"},e),o.NextResponse.json({error:"Internal server error"},{status:500})}}let h=new i.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/security/route",pathname:"/api/security",filename:"route",bundlePath:"app/api/security/route"},resolvedPagePath:"C:\\Users\\amand\\Rafael\\aifisio\\fisioflow-aistudio\\app\\api\\security\\route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:w,staticGenerationAsyncStorage:T,serverHooks:I}=h,L="/api/security/route";function _(){return(0,n.patchFetch)({serverHooks:I,staticGenerationAsyncStorage:T})}},90455:(e,t,r)=>{"use strict";r.d(t,{I8:()=>l,handlers:()=>d,ts:()=>y});var s=r(96708),i=r(80772),a=r(7585),n=r(49237),o=r(42023),c=r.n(o);let u={adapter:(0,a.N)(n._B),providers:[(0,i.Z)({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;try{let t=await n._B.user.findUnique({where:{email:e.email}});if(!t||!t.passwordHash||!await c().compare(e.password,t.passwordHash))return null;return{id:t.id,email:t.email,name:t.name,role:t.role,avatarUrl:t.avatarUrl||void 0}}catch(e){return console.error("Auth error:",e),null}}})],session:{strategy:"jwt",maxAge:2592e3},jwt:{maxAge:2592e3},callbacks:{jwt:async({token:e,user:t})=>(t&&(e.role=t.role,e.avatarUrl=t.avatarUrl),e),session:async({session:e,token:t})=>(t&&(e.user.id=t.sub,e.user.role=t.role,e.user.avatarUrl=t.avatarUrl),e)},pages:{signIn:"/login",error:"/login"},secret:process.env.NEXTAUTH_SECRET},{auth:l,handlers:d,signIn:p,signOut:E}=(0,s.ZP)(u);async function y(){let e=await l();return e?.user||null}},37502:(e,t,r)=>{"use strict";r.d(t,{Ve:()=>d,eK:()=>p,qL:()=>l,vK:()=>n});var s=r(62237),i=r(53524),a=r(34893);s.vK.webSocketConstructor=a.ZP,s.vK.useSecureWebSocket=!0,s.vK.pipelineConnect=!1;let n=s.vK,o=process.env.DATABASE_URL,c=new s.Kg({connectionString:o,max:parseInt(process.env.DATABASE_POOL_SIZE||"20"),idleTimeoutMillis:parseInt(process.env.DATABASE_POOL_IDLE_TIMEOUT||"600000"),connectionTimeoutMillis:parseInt(process.env.DATABASE_POOL_TIMEOUT||"30000"),statement_timeout:parseInt(process.env.DATABASE_STATEMENT_TIMEOUT||"60000"),query_timeout:parseInt(process.env.DATABASE_QUERY_TIMEOUT||"30000")}),u=new i.PrismaClient({log:["error"],errorFormat:"pretty"}),l={apiKey:process.env.NEON_API_KEY,projectId:process.env.NEON_PROJECT_ID,branchId:process.env.NEON_BRANCH_ID,endpointId:process.env.NEON_ENDPOINT_ID,baseUrl:"https://console.neon.tech/api/v2"};async function d(){let e=Date.now();try{await u.$queryRaw`SELECT 1`;let t=Date.now()-e;return{status:"healthy",latency:t,poolStats:{totalConnections:c.totalCount,idleConnections:c.idleCount,waitingClients:c.waitingCount},timestamp:new Date().toISOString()}}catch(t){return{status:"unhealthy",latency:Date.now()-e,poolStats:{totalConnections:c.totalCount,idleConnections:c.idleCount,waitingClients:c.waitingCount},timestamp:new Date().toISOString()}}}async function p(){try{let[e,t,r]=await Promise.all([u.$queryRaw`
        SELECT 
          count(*) as total_connections,
          count(*) FILTER (WHERE state = 'active') as active_connections,
          count(*) FILTER (WHERE state = 'idle') as idle_connections
        FROM pg_stat_activity
        WHERE datname = current_database()
      `,u.$queryRaw`
        SELECT pg_size_pretty(pg_database_size(current_database())) as size
      `,u.$queryRaw`
        SELECT count(*) as active_queries
        FROM pg_stat_activity 
        WHERE state = 'active' AND query != '<IDLE>'
      `]);return{connectionStats:Array.isArray(e)?e[0]:e,databaseSize:Array.isArray(t)?t[0]:t,activeQueries:Array.isArray(r)?r[0]:r,poolStats:{totalConnections:c.totalCount,idleConnections:c.idleCount,waitingClients:c.waitingCount},timestamp:new Date().toISOString()}}catch(e){throw e}}async function E(){try{await u.$disconnect(),await c.end()}catch(e){}}parseInt(process.env.NEON_AUTO_SUSPEND_DELAY||"300"),process.on("SIGINT",E),process.on("SIGTERM",E),process.on("beforeExit",E)}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[216,237],()=>r(35175));module.exports=s})();