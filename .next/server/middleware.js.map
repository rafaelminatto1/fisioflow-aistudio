{"version":3,"file":"middleware.js","mappings":"kFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,4JCGO,eAAeC,EAAWC,CAAoB,EACnD,IAAMC,EAAYC,KAAKC,GAAG,GAE1B,GAAI,CAEF,IAAMC,EAAM,IAAIC,IAAIL,EAAQI,GAAG,EAC/B,GAAIA,YAAAA,EAAIE,QAAQ,CAAgB,CAC9B,IAAMC,EAAa,CACjBC,OAAQ,UACRC,UAAW,IAAIP,OAAOQ,WAAW,GACjCC,MAAO,UACPZ,WAAY,QACd,EAEA,OAAOa,EAAAA,EAAYA,CAACC,IAAI,CAACN,EAAY,CACnCC,OAAQ,IACRM,QAAS,CACP,gBAAiB,qBACjB,eAAgB,mBAChB,UAAW,MACb,CACF,EACF,CAGA,IAAMC,EAAWH,EAAAA,EAAYA,CAACI,IAAI,GAMlC,OAHAD,EAASD,OAAO,CAACG,GAAG,CAAC,kBAAmB,CAAC,EAAEf,KAAKC,GAAG,GAAKF,EAAU,EAAE,CAAC,EACrEc,EAASD,OAAO,CAACG,GAAG,CAAC,UAAW,QAEzBF,CAET,CAAE,MAAOG,EAAO,CAGd,OAFAC,QAAQD,KAAK,CAAC,oBAAqBA,GAE5BN,EAAAA,EAAYA,CAACC,IAAI,CACtB,CAAEK,MAAO,uBAAwB,EACjC,CAAEV,OAAQ,GAAI,EAElB,CACF,CAEO,IAAMY,EAAS,CACpBC,QAAS,CACP,wDACD,EC7CHC,EAAA,CACA,GAAOC,CAAI,EAEXC,EAAAF,EAAAvB,UAAA,EAAAuB,EAAAG,OAAA,CACAC,EAAA,cACA,sBAAAF,EACA,+BAAuCE,EAAK,2DAE7B,SAAAC,EAAAC,CAAA,EACf,MAAW,GAAAC,EAAAC,CAAA,EAAO,CAClB,GAAAF,CAAA,CACAF,KAAAA,EACAF,QAAAA,CACA,EACA","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./middleware.ts","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","// middleware-simple.ts - Simplified middleware for testing\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const startTime = Date.now();\r\n  \r\n  try {\r\n    // Simple health check\r\n    const url = new URL(request.url);\r\n    if (url.pathname === '/health') {\r\n      const healthData = {\r\n        status: 'healthy',\r\n        timestamp: new Date().toISOString(),\r\n        cache: 'enabled',\r\n        middleware: 'active',\r\n      };\r\n      \r\n      return NextResponse.json(healthData, {\r\n        status: 200,\r\n        headers: {\r\n          'Cache-Control': 'public, max-age=60',\r\n          'Content-Type': 'application/json',\r\n          'X-Cache': 'MISS',\r\n        },\r\n      });\r\n    }\r\n    \r\n    // Continue with the request\r\n    const response = NextResponse.next();\r\n    \r\n    // Add basic headers\r\n    response.headers.set('X-Response-Time', `${Date.now() - startTime}ms`);\r\n    response.headers.set('X-Cache', 'MISS');\r\n    \r\n    return response;\r\n    \r\n  } catch (error) {\r\n    console.error('Middleware error:', error);\r\n    \r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    '/((?!_next/static|_next/image|favicon.ico|public/).*)',\r\n  ],\r\n};","import \"next/dist/server/web/globals\";\nimport { adapter } from \"next/dist/server/web/adapter\";\n// Import the userland code.\nimport * as _mod from \"private-next-root-dir/middleware.ts\";\nconst mod = {\n    ..._mod\n};\nconst handler = mod.middleware || mod.default;\nconst page = \"/middleware\";\nif (typeof handler !== \"function\") {\n    throw new Error(`The Middleware \"${page}\" must export a \\`middleware\\` or a \\`default\\` function`);\n}\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        page,\n        handler\n    });\n}\n\n//# sourceMappingURL=middleware.js.map"],"names":["module","exports","require","middleware","request","startTime","Date","now","url","URL","pathname","healthData","status","timestamp","toISOString","cache","NextResponse","json","headers","response","next","set","error","console","config","matcher","mod","middleware_namespaceObject","handler","default","page","nHandler","opts","adapter","C"],"sourceRoot":""}