name: Railway Deploy

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DIRECT_URL: ${{ secrets.DIRECT_URL }}
  NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
  NEON_API_KEY: ${{ secrets.NEON_API_KEY }}

jobs:
  # Job de valida√ß√£o e testes
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_deploy.outputs.should_deploy }}
      environment: ${{ steps.check_deploy.outputs.environment }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üìã Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üîß Install dependencies
        run: npm ci

      - name: üîç Lint code
        run: npm run lint
        continue-on-error: false

      - name: üèóÔ∏è Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: üß™ Run tests
        run: |
          if npm run test --if-present; then
            echo "Tests passed"
          else
            echo "Tests failed"
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              exit 1
            fi
          fi

      - name: üîí Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: üìä Check bundle size
        run: |
          if [ -f "dist/index.html" ]; then
            echo "Bundle size check:"
            du -sh dist/
            find dist -name "*.js" -exec du -h {} \; | sort -hr | head -10
          fi

      - name: üéØ Determine deployment
        id: check_deploy
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

  # Job de deploy no Railway
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üîß Install dependencies
        run: npm ci

      - name: üöÑ Install Railway CLI
        run: npm install -g @railway/cli

      - name: üîê Railway Login
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: üîó Link Railway Project
        run: |
          if [ "${{ needs.validate.outputs.environment }}" = "production" ]; then
            railway link ${{ secrets.RAILWAY_PROJECT_ID_PROD }}
          elif [ "${{ needs.validate.outputs.environment }}" = "staging" ]; then
            railway link ${{ secrets.RAILWAY_PROJECT_ID_STAGING }}
          else
            railway link ${{ secrets.RAILWAY_PROJECT_ID_DEV }}
          fi

      - name: üîß Set Environment Variables
        run: |
          railway variables set NODE_ENV=${{ needs.validate.outputs.environment }}
          railway variables set DATABASE_URL="${{ secrets.DATABASE_URL }}"
          railway variables set DIRECT_URL="${{ secrets.DIRECT_URL }}"
          railway variables set NEON_PROJECT_ID="${{ secrets.NEON_PROJECT_ID }}"
          railway variables set NEON_API_KEY="${{ secrets.NEON_API_KEY }}"
          railway variables set JWT_SECRET="${{ secrets.JWT_SECRET }}"
          railway variables set NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
          railway variables set NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}"

      - name: üóÑÔ∏è Run Database Migrations
        run: |
          echo "Checking for pending migrations..."
          railway run npx prisma migrate status
          
          echo "Running migrations..."
          railway run npx prisma migrate deploy
          
          echo "Generating Prisma client..."
          railway run npx prisma generate

      - name: üöÄ Deploy to Railway
        id: deploy
        run: |
          echo "Starting Railway deployment..."
          DEPLOY_OUTPUT=$(railway up --detach 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract deployment URL
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^[:space:]]*' | head -1)
          if [ -n "$DEPLOY_URL" ]; then
            echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          fi
          
          # Extract deployment ID
          DEPLOY_ID=$(echo "$DEPLOY_OUTPUT" | grep -o 'deployment [a-f0-9-]*' | cut -d' ' -f2)
          if [ -n "$DEPLOY_ID" ]; then
            echo "deployment_id=$DEPLOY_ID" >> $GITHUB_OUTPUT
          fi

      - name: ‚è≥ Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          timeout=300  # 5 minutes
          interval=10  # 10 seconds
          elapsed=0
          
          while [ $elapsed -lt $timeout ]; do
            STATUS=$(railway status --json | jq -r '.deployments[0].status' 2>/dev/null || echo "UNKNOWN")
            echo "Deployment status: $STATUS"
            
            if [ "$STATUS" = "SUCCESS" ]; then
              echo "‚úÖ Deployment successful!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "‚ùå Deployment failed!"
              exit 1
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Deployment timeout!"
            exit 1
          fi

      - name: üè• Health Check
        run: |
          if [ -n "${{ steps.deploy.outputs.deployment_url }}" ]; then
            HEALTH_URL="${{ steps.deploy.outputs.deployment_url }}/api/health"
            echo "Checking health endpoint: $HEALTH_URL"
            
            timeout=180  # 3 minutes
            interval=10  # 10 seconds
            elapsed=0
            
            while [ $elapsed -lt $timeout ]; do
              if curl -f -s "$HEALTH_URL" > /dev/null; then
                echo "‚úÖ Health check passed!"
                curl -s "$HEALTH_URL" | jq .
                break
              else
                echo "Health check failed, retrying in ${interval}s..."
                sleep $interval
                elapsed=$((elapsed + interval))
              fi
            done
            
            if [ $elapsed -ge $timeout ]; then
              echo "‚ùå Health check timeout!"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No deployment URL found, skipping health check"
          fi

      - name: üìä Post-Deploy Verification
        run: |
          echo "üîç Running post-deploy verification..."
          
          # Check database connection
          railway run node -e "console.log('Testing database connection...'); require('./lib/neon-config.ts').testConnection().then(() => console.log('‚úÖ Database OK')).catch(e => { console.error('‚ùå Database Error:', e.message); process.exit(1); })"
          
          # Check service status
          railway status
          
          echo "‚úÖ Post-deploy verification completed"

  # Job de notifica√ß√£o
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always() && needs.validate.outputs.should_deploy == 'true'
    
    steps:
      - name: üìß Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "Railway Deployment ${{ job.status }}",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || job.status == 'failure' && 'danger' || 'warning' }}",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "${{ needs.validate.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üìß Discord Notification
        if: always() && secrets.DISCORD_WEBHOOK_URL
        run: |
          STATUS_EMOJI="${{ job.status == 'success' && '‚úÖ' || job.status == 'failure' && '‚ùå' || '‚ö†Ô∏è' }}"
          STATUS_COLOR="${{ job.status == 'success' && '3066993' || job.status == 'failure' && '15158332' || '16776960' }}"
          
          curl -H "Content-Type: application/json" \
               -d "{
                 \"embeds\": [{
                   \"title\": \"${STATUS_EMOJI} Railway Deployment ${{ job.status }}\",
                   \"color\": ${STATUS_COLOR},
                   \"fields\": [
                     {\"name\": \"Environment\", \"value\": \"${{ needs.validate.outputs.environment }}\", \"inline\": true},
                     {\"name\": \"Repository\", \"value\": \"${{ github.repository }}\", \"inline\": true},
                     {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                     {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\", \"inline\": true}
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"
                 }]
               }" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"

  # Job de rollback autom√°tico em caso de falha
  rollback:
    name: Auto Rollback
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: failure() && needs.validate.outputs.environment == 'production'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üöÑ Install Railway CLI
        run: npm install -g @railway/cli

      - name: üîê Railway Login
        run: railway login --token ${{ secrets.RAILWAY_TOKEN }}

      - name: üîó Link Railway Project
        run: railway link ${{ secrets.RAILWAY_PROJECT_ID_PROD }}

      - name: üîÑ Execute Rollback
        run: |
          echo "üîÑ Starting automatic rollback..."
          
          # Get previous successful deployment
          DEPLOYMENTS=$(railway deployments --json)
          PREVIOUS_DEPLOY=$(echo "$DEPLOYMENTS" | jq -r '.[] | select(.status == "SUCCESS") | .id' | head -2 | tail -1)
          
          if [ -n "$PREVIOUS_DEPLOY" ]; then
            echo "Rolling back to deployment: $PREVIOUS_DEPLOY"
            railway rollback "$PREVIOUS_DEPLOY"
            echo "‚úÖ Rollback completed"
          else
            echo "‚ùå No previous successful deployment found"
            exit 1
          fi

      - name: üìß Rollback Notification
        if: always()
        run: |
          if [ "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
                 --data '{"text":"üîÑ Automatic rollback executed for FisioFlow production deployment"}' \
                 "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi