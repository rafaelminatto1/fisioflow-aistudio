name: Deploy to Production

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
    DIRECT_URL: ${{ secrets.DIRECT_URL }}

jobs:
  # =============================================================================
  # LINT AND TYPE CHECK
  # =============================================================================
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript check
        run: npm run type-check

  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Build application
        run: npm run build
        env:
          # Mock environment variables for build
          DATABASE_URL: "postgresql://user:pass@localhost:5432/test"
          DIRECT_URL: "postgresql://user:pass@localhost:5432/test"
          NEXTAUTH_SECRET: "test-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          DATABASE_URL: "postgresql://user:pass@localhost:5432/test"
          DIRECT_URL: "postgresql://user:pass@localhost:5432/test"
          
      - name: Run tests (if available)
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No tests found, skipping..."
          fi
        continue-on-error: true

  # =============================================================================
  # SECURITY SCAN
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # =============================================================================
  # DATABASE SETUP
  # =============================================================================
  database-setup:
    name: Database Setup
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          echo "üîÑ Setting up test database..."
          # Run Prisma migrations
          npx prisma migrate deploy
          echo "‚úÖ Test database setup completed"
          
  # =============================================================================
  # DATABASE MIGRATION CHECK
  # =============================================================================
  migration-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    needs: [build-and-test, database-setup]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for migration changes
        run: |
          if git diff --name-only origin/main...HEAD | grep -q "prisma/migrations\|prisma/schema.prisma"; then
            echo "Database schema changes detected"
            echo "MIGRATION_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No database schema changes"
            echo "MIGRATION_CHANGES=false" >> $GITHUB_ENV
          fi
          
      - name: Validate Prisma schema
        if: env.MIGRATION_CHANGES == 'true'
        run: npx prisma validate
        
      - name: Test database migrations
        if: env.MIGRATION_CHANGES == 'true'
        run: |
          echo "üß™ Testing database migrations..."
          
          # Test database connection
          npx prisma db pull --force
          
          # Run seed if exists
          if [ -f "prisma/seed.ts" ]; then
            npm run db:seed
          fi
          
          echo "Database migrations tested successfully"
        
      - name: Check migration status
        if: env.MIGRATION_CHANGES == 'true'
        run: |
          echo "‚ö†Ô∏è Database migration changes detected!"
          echo "Database migrations tested successfully"
          echo "Please ensure migrations are reviewed before merging."

  # =============================================================================
  # DEPLOY TO STAGING (PR)
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Digital Ocean CLI
        run: |
          wget -O- https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar xz
          sudo mv doctl /usr/local/bin
        
      - name: Deploy to Digital Ocean Staging
        run: |
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          DIGITALOCEAN_APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check staging
        run: |
          STAGING_URL="https://fisioflow-aistudio-1-fc4f8558-d183-4d7e-8ea4-347355a20230.ondigitalocean.app"
          for i in {1..10}; do
            if curl -f "$STAGING_URL/api/health"; then
              echo "‚úÖ Staging deployment healthy"
              exit 0
            fi
            echo "‚è≥ Waiting for staging deployment... ($i/10)"
            sleep 10
          done
          echo "‚ùå Staging deployment health check failed"
          exit 1

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Digital Ocean CLI
        run: |
          wget -O- https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar xz
          sudo mv doctl /usr/local/bin
        
      - name: Pre-deploy Neon backup
        run: |
          echo "üì¶ Creating pre-deploy Neon backup..."
          
          # Create backup branch
          BACKUP_BRANCH="backup-$(date +%Y%m%d-%H%M%S)"
          
          curl -X POST \
            "https://console.neon.tech/api/v2/projects/${{ env.NEON_PROJECT_ID }}/branches" \
            -H "Authorization: Bearer ${{ env.NEON_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"$BACKUP_BRANCH\",
              \"parent_id\": \"main\"
            }"
          
          echo "‚úÖ Backup branch created: $BACKUP_BRANCH"
        env:
          NEON_API_KEY: ${{ env.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ env.NEON_PROJECT_ID }}
        continue-on-error: true
        
      - name: Run Neon database migrations
        run: |
          echo "üîÑ Running database migrations on Neon..."
          
          # Set Neon connection for migrations
          export DATABASE_URL="$NEON_DATABASE_URL"
          export DIRECT_URL="$NEON_DIRECT_URL"
          
          # Check if migrations are needed
          if git diff --name-only HEAD~1 HEAD | grep -q "prisma/migrations\|prisma/schema.prisma"; then
            echo "üîÑ Running database migrations..."
            npx prisma migrate deploy
            echo "‚úÖ Neon migrations completed"
          else
            echo "‚ÑπÔ∏è No migrations needed"
          fi
        env:
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          NEON_DIRECT_URL: ${{ secrets.NEON_DIRECT_URL }}
          
      - name: Deploy to Digital Ocean Production
        id: deploy
        run: |
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
          echo "üöÄ Starting production deployment..."
          DEPLOY_OUTPUT=$(doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait 2>&1)
          echo "$DEPLOY_OUTPUT"
          
          # Extract deployment ID if available
          DEPLOY_ID=$(echo "$DEPLOY_OUTPUT" | grep -o '[a-f0-9-]\{36\}' | head -1 || echo "unknown")
          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Deployment initiated: $DEPLOY_ID"
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          DIGITALOCEAN_APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
          
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 60
          
      - name: Health check production
        id: health_check
        run: |
          PROD_URL="https://fisioflow-aistudio-1-fc4f8558-d183-4d7e-8ea4-347355a20230.ondigitalocean.app"
          
          echo "üè• Running production health checks..."
          
          for i in {1..15}; do
            echo "Health check attempt $i/15..."
            
            if curl -f -s "$PROD_URL/api/health" > /dev/null; then
              echo "‚úÖ Production deployment is healthy!"
              
              # Get detailed health info
              HEALTH_RESPONSE=$(curl -s "$PROD_URL/api/health")
              echo "Health response: $HEALTH_RESPONSE"
              
              echo "HEALTH_STATUS=healthy" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "‚è≥ Waiting for production deployment... ($i/15)"
            sleep 20
          done
          
          echo "‚ùå Production deployment health check failed!"
          echo "HEALTH_STATUS=unhealthy" >> $GITHUB_OUTPUT
          exit 1
          
      - name: Rollback on failure
        if: failure() && steps.health_check.outputs.HEALTH_STATUS == 'unhealthy'
        run: |
          echo "üîÑ Health check failed, initiating rollback..."
          
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
          # Get previous deployment and rollback
          echo "Rolling back to previous deployment..."
          DEPLOYMENTS=$(doctl apps list-deployments ${{ secrets.DIGITALOCEAN_APP_ID }} --format ID,CreatedAt --no-header | head -2)
          PREVIOUS_DEPLOY=$(echo "$DEPLOYMENTS" | tail -1 | awk '{print $1}')
          
          if [ -n "$PREVIOUS_DEPLOY" ]; then
            echo "Rolling back to deployment: $PREVIOUS_DEPLOY"
            doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --from-deployment $PREVIOUS_DEPLOY
          else
            echo "No previous deployment found for rollback"
          fi
          
          echo "‚ùå Deployment failed and rollback attempted"
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          DIGITALOCEAN_APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
          
      - name: Post-deployment verification
        if: success()
        run: |
          echo "üîç Running post-deployment verification..."
          
          PROD_URL="https://fisioflow-aistudio-1-fc4f8558-d183-4d7e-8ea4-347355a20230.ondigitalocean.app"
          
          # Test critical endpoints
          echo "Testing authentication endpoint..."
          curl -f "$PROD_URL/api/auth/session" || echo "Auth endpoint test failed"
          
          echo "Testing patient API..."
          curl -f "$PROD_URL/api/pacientes" || echo "Patient API test failed"
          
          echo "‚úÖ Post-deployment verification completed"
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "Deployment ID: ${{ steps.deploy.outputs.DEPLOY_ID }}"
          echo "Health Status: ${{ steps.health_check.outputs.HEALTH_STATUS }}"
          
          # Send notification (webhook, Slack, etc.)
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"üöÄ FisioFlow deployed successfully to production!"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi

  # =============================================================================
  # POST-DEPLOY MONITORING
  # =============================================================================
  post-deploy-monitoring:
    name: Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Neon DB health check
        run: |
          echo "üîç Running Neon DB health check..."
          
          # Check Neon project status
          PROJECT_STATUS=$(curl -s \
            "https://console.neon.tech/api/v2/projects/${{ env.NEON_PROJECT_ID }}" \
            -H "Authorization: Bearer ${{ env.NEON_API_KEY }}" | jq -r '.project.state')
          
          echo "Neon project status: $PROJECT_STATUS"
          
          if [ "$PROJECT_STATUS" != "active" ]; then
            echo "‚ùå Neon project is not active!"
            exit 1
          fi
          
          # Check database connectivity
          node -e "
            const { neonConfig } = require('./lib/neon-config');
            neonConfig.checkNeonHealth().then(health => {
              console.log('Neon health check:', health);
              if (!health.isHealthy) {
                console.error('‚ùå Neon health check failed!');
                process.exit(1);
              }
              console.log('‚úÖ Neon DB is healthy');
            }).catch(err => {
              console.error('‚ùå Neon health check error:', err);
              process.exit(1);
            });
          "
        env:
          NEON_API_KEY: ${{ env.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ env.NEON_PROJECT_ID }}
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          NEON_DIRECT_URL: ${{ secrets.NEON_DIRECT_URL }}
          
      - name: Extended health check
        run: |
          echo "üîç Running extended health check..."
          node scripts/health-check.js --extended
          
      - name: Neon metrics collection
        run: |
          echo "üìä Collecting Neon metrics..."
          
          # Get Neon metrics
          node -e "
            const { neonConfig } = require('./lib/neon-config');
            neonConfig.getNeonMetrics().then(metrics => {
              console.log('Neon metrics:', JSON.stringify(metrics, null, 2));
              
              // Check critical metrics
              if (metrics.connections.active > 80) {
                console.warn('‚ö†Ô∏è High connection usage:', metrics.connections.active);
              }
              
              if (metrics.latency > 100) {
                console.warn('‚ö†Ô∏è High latency:', metrics.latency + 'ms');
              }
              
              console.log('‚úÖ Neon metrics collected successfully');
            }).catch(err => {
              console.error('‚ùå Failed to collect Neon metrics:', err);
              process.exit(1);
            });
          "
        env:
          NEON_API_KEY: ${{ env.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ env.NEON_PROJECT_ID }}
          NEON_DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          
      - name: Performance baseline check
        run: |
          echo "üìä Running performance baseline check..."
          # Add performance testing logic
          echo "Performance check completed"

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Cleanup test resources
        run: |
          echo "üßπ Cleaning up test resources..."
          echo "‚úÖ Cleanup completed"