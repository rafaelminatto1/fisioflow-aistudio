name: Release and Changelog

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # VALIDATE RELEASE
  # =============================================================================
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "📦 Release version: $VERSION"
          echo "🔖 Pre-release: $IS_PRERELEASE"
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
            exit 1
          fi
          
          echo "✅ Version format is valid"
          
      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          
          echo "✅ Tag $VERSION is available"

  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: |
          echo "🧪 Running comprehensive tests for release..."
          
          # Type check
          npm run type-check
          
          # Lint
          npm run lint
          
          # Tests (if available)
          if grep -q '"test"' package.json; then
            npm test
          fi
          
          echo "✅ All tests passed"
          
      - name: Build application
        run: |
          echo "🔨 Building application for release..."
          npm run build
          echo "✅ Build completed successfully"
        env:
          NODE_ENV: production
          DATABASE_URL: "postgresql://user:pass@localhost:5432/prod"
          NEXTAUTH_SECRET: "production-secret"
          NEXTAUTH_URL: "https://fisioflow.digitalocean.app"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            dist/
            build/
          retention-days: 7

  # =============================================================================
  # GENERATE CHANGELOG
  # =============================================================================
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating changelog from first commit"
            COMMIT_RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
          else
            echo "Previous tag: $PREVIOUS_TAG"
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi
          
          # Generate changelog content
          CHANGELOG="## 🚀 Release $VERSION\n\n"
          CHANGELOG+="**Release Date:** $(date +'%Y-%m-%d')\n\n"
          
          # Features
          FEATURES=$(git log $COMMIT_RANGE --oneline --grep="^feat" --grep="^feature" | sed 's/^[a-f0-9]* /- /' || true)
          if [ -n "$FEATURES" ]; then
            CHANGELOG+="### ✨ New Features\n$FEATURES\n\n"
          fi
          
          # Bug fixes
          FIXES=$(git log $COMMIT_RANGE --oneline --grep="^fix" --grep="^bugfix" | sed 's/^[a-f0-9]* /- /' || true)
          if [ -n "$FIXES" ]; then
            CHANGELOG+="### 🐛 Bug Fixes\n$FIXES\n\n"
          fi
          
          # Improvements
          IMPROVEMENTS=$(git log $COMMIT_RANGE --oneline --grep="^perf" --grep="^improve" --grep="^refactor" | sed 's/^[a-f0-9]* /- /' || true)
          if [ -n "$IMPROVEMENTS" ]; then
            CHANGELOG+="### 🔧 Improvements\n$IMPROVEMENTS\n\n"
          fi
          
          # Documentation
          DOCS=$(git log $COMMIT_RANGE --oneline --grep="^docs" | sed 's/^[a-f0-9]* /- /' || true)
          if [ -n "$DOCS" ]; then
            CHANGELOG+="### 📚 Documentation\n$DOCS\n\n"
          fi
          
          # Dependencies
          DEPS=$(git log $COMMIT_RANGE --oneline --grep="^deps" --grep="^build" | sed 's/^[a-f0-9]* /- /' || true)
          if [ -n "$DEPS" ]; then
            CHANGELOG+="### 📦 Dependencies\n$DEPS\n\n"
          fi
          
          # Other changes
          OTHER=$(git log $COMMIT_RANGE --oneline --invert-grep --grep="^feat" --grep="^fix" --grep="^perf" --grep="^docs" --grep="^deps" --grep="^build" --grep="^refactor" --grep="^improve" | sed 's/^[a-f0-9]* /- /' | head -10 || true)
          if [ -n "$OTHER" ]; then
            CHANGELOG+="### 🔄 Other Changes\n$OTHER\n\n"
          fi
          
          # Contributors
          CONTRIBUTORS=$(git log $COMMIT_RANGE --format='%an' | sort -u | sed 's/^/- @/' | tr '\n' ' ' || true)
          if [ -n "$CONTRIBUTORS" ]; then
            CHANGELOG+="### 👥 Contributors\n$CONTRIBUTORS\n\n"
          fi
          
          # Full changelog link
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG+="**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION\n\n"
          fi
          
          # Save changelog
          echo -e "$CHANGELOG" > RELEASE_CHANGELOG.md
          
          # Output for GitHub
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "✅ Changelog generated"
          
      - name: Update CHANGELOG.md
        run: |
          echo "📝 Updating CHANGELOG.md..."
          
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Create or update CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Insert new changelog at the top
            {
              echo "# Changelog"
              echo ""
              cat RELEASE_CHANGELOG.md
              echo ""
              tail -n +3 CHANGELOG.md 2>/dev/null || true
            } > CHANGELOG_NEW.md
            mv CHANGELOG_NEW.md CHANGELOG.md
          else
            # Create new CHANGELOG.md
            {
              echo "# Changelog"
              echo ""
              cat RELEASE_CHANGELOG.md
            } > CHANGELOG.md
          fi
          
          echo "✅ CHANGELOG.md updated"
          
      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: |
            CHANGELOG.md
            RELEASE_CHANGELOG.md
          retention-days: 7

  # =============================================================================
  # CREATE RELEASE
  # =============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test, generate-changelog]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog
          
      - name: Create Git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
          echo "✅ Tag $VERSION created and pushed"
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: 'Release ${{ needs.validate-release.outputs.version }}'
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          
      - name: Update repository CHANGELOG
        run: |
          echo "📝 Committing updated CHANGELOG.md..."
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG.md for ${{ needs.validate-release.outputs.version }}" || echo "No changes to commit"
          git push origin main || echo "Failed to push changelog update"
          
          echo "✅ CHANGELOG.md updated in repository"

  # =============================================================================
  # DEPLOY RELEASE
  # =============================================================================
  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-release.outputs.version }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying release ${{ needs.validate-release.outputs.version }} to production..."
          
          # Run deployment script
          npm run deploy
          
          echo "✅ Release deployed to production"
          
      - name: Post-deployment verification
        run: |
          echo "🔍 Verifying production deployment..."
          
          # Wait for deployment
          sleep 60
          
          # Health check
          PROD_URL="https://fisioflow.digitalocean.app"
          
          for i in {1..10}; do
            if curl -f "$PROD_URL/api/health"; then
              echo "✅ Production deployment verified"
              exit 0
            fi
            echo "⏳ Waiting for deployment... ($i/10)"
            sleep 15
          done
          
          echo "❌ Production deployment verification failed"
          exit 1

  # =============================================================================
  # NOTIFY RELEASE
  # =============================================================================
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-release]
    if: always()
    
    steps:
      - name: Notify Slack
        if: success() && secrets.SLACK_WEBHOOK_URL
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            EMOJI="🧪"
            TYPE="Pre-release"
          else
            EMOJI="🚀"
            TYPE="Release"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$EMOJI $TYPE $VERSION deployed successfully!\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"$EMOJI *FisioFlow $TYPE $VERSION* has been deployed to production!\\n\\n:link: <https://fisioflow.digitalocean.app|View Application>\\n:octocat: <https://github.com/${{ github.repository }}/releases/tag/$VERSION|View Release>\"
                  }
                }
              ]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Release process failed for ${{ needs.validate-release.outputs.version }}"
          
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ FisioFlow release ${{ needs.validate-release.outputs.version }} failed!"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi