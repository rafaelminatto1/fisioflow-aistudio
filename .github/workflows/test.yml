name: Tests and Quality Checks

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # =============================================================================
  # CODE QUALITY CHECKS
  # =============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for better analysis
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint with detailed output
        run: |
          echo "üîç Running ESLint..."
          npm run lint -- --format=json --output-file=eslint-report.json || true
          npm run lint
          
      - name: Run Prettier check
        run: |
          echo "üíÖ Checking code formatting..."
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || {
            echo "‚ùå Code formatting issues found. Run 'npm run format' to fix."
            exit 1
          }
          
      - name: TypeScript strict check
        run: |
          echo "üîß Running TypeScript strict check..."
          npm run type-check
          
      - name: Check for TODO/FIXME comments
        run: |
          echo "üìù Checking for TODO/FIXME comments..."
          TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | wc -l || echo "0")
          echo "Found $TODO_COUNT TODO/FIXME comments"
          
          if [ $TODO_COUNT -gt 50 ]; then
            echo "‚ö†Ô∏è High number of TODO/FIXME comments ($TODO_COUNT). Consider addressing some."
          fi
          
      - name: Check bundle size
        run: |
          echo "üì¶ Analyzing bundle size..."
          npm run build
          
          # Check if .next directory exists and analyze
          if [ -d ".next" ]; then
            echo "Build output size:"
            du -sh .next/
            
            # Check for large files
            find .next -name "*.js" -size +500k -exec ls -lh {} \; | head -10
          fi
          
      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 7

  # =============================================================================
  # DEPENDENCY CHECKS
  # =============================================================================
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          npm outdated || true
          
      - name: Audit dependencies
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate
          
      - name: Check for duplicate dependencies
        run: |
          echo "üîç Checking for duplicate dependencies..."
          npx npm-check-duplicates || true
          
      - name: License compliance check
        run: |
          echo "‚öñÔ∏è Checking license compliance..."
          npx license-checker --summary || true

  # =============================================================================
  # UNIT TESTS
  # =============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18', '20']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run unit tests
        run: |
          if grep -q '"test"' package.json; then
            echo "üß™ Running unit tests..."
            npm test -- --coverage --watchAll=false
          else
            echo "‚ÑπÔ∏è No unit tests configured"
            # Create a basic test to ensure the build works
            echo "Running basic build test..."
            npm run build
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          NEXTAUTH_SECRET: "test-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          
      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: fisioflow_test
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: |
          echo "üóÑÔ∏è Setting up test database..."
          
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432 -U test; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Generate Prisma client
          npx prisma generate
          
          # Run migrations
          npx prisma migrate deploy
          
          # Seed test data if available
          if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
            echo "üå± Seeding test data..."
            npx prisma db seed
          fi
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/fisioflow_test"
          
      - name: Run integration tests
        run: |
          echo "üîó Running integration tests..."
          
          # Check if integration tests exist
          if [ -d "tests/integration" ] || [ -d "__tests__/integration" ]; then
            npm run test:integration || echo "Integration tests failed"
          else
            echo "‚ÑπÔ∏è No integration tests found"
            
            # Run basic API tests
            echo "Running basic API health check..."
            npm run build
            npm start &
            SERVER_PID=$!
            
            # Wait for server to start
            sleep 10
            
            # Test health endpoint
            curl -f http://localhost:3000/api/health || echo "Health check failed"
            
            # Cleanup
            kill $SERVER_PID
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://test:test@localhost:5432/fisioflow_test"
          NEXTAUTH_SECRET: "test-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          
      - name: Database migration test
        run: |
          echo "üîÑ Testing database migrations..."
          
          # Reset database
          npx prisma migrate reset --force
          
          # Apply migrations step by step
          npx prisma migrate deploy
          
          # Verify schema
          npx prisma validate
          
          echo "‚úÖ Migration tests passed"
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/fisioflow_test"

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          NEXTAUTH_SECRET: "test-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          
      - name: Lighthouse CI
        run: |
          echo "üö¶ Running Lighthouse performance tests..."
          
          # Install Lighthouse CI
          npm install -g @lhci/cli
          
          # Start the application
          npm start &
          SERVER_PID=$!
          
          # Wait for server
          sleep 15
          
          # Run Lighthouse
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse tests completed with warnings"
          
          # Cleanup
          kill $SERVER_PID
        continue-on-error: true
        
      - name: Bundle analyzer
        run: |
          echo "üìä Analyzing bundle size..."
          
          # Install bundle analyzer
          npm install --save-dev webpack-bundle-analyzer
          
          # Analyze bundle (if Next.js)
          if [ -f "next.config.js" ] || [ -f "next.config.mjs" ]; then
            npx @next/bundle-analyzer
          fi
        continue-on-error: true

  # =============================================================================
  # ACCESSIBILITY TESTS
  # =============================================================================
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          NEXTAUTH_SECRET: "test-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          
      - name: Run accessibility tests
        run: |
          echo "‚ôø Running accessibility tests..."
          
          # Install axe-core CLI
          npm install -g @axe-core/cli
          
          # Start the application
          npm start &
          SERVER_PID=$!
          
          # Wait for server
          sleep 15
          
          # Run axe tests on key pages
          axe http://localhost:3000 --exit || echo "Accessibility issues found"
          axe http://localhost:3000/login --exit || echo "Login page accessibility issues"
          
          # Cleanup
          kill $SERVER_PID
        continue-on-error: true

  # =============================================================================
  # SUMMARY REPORT
  # =============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check, unit-tests, integration-tests]
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "üìã Test Summary Report"
          echo "====================="
          echo ""
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo ""
          
          # Determine overall status
          if [[ "${{ needs.code-quality.result }}" == "success" && 
                "${{ needs.dependency-check.result }}" == "success" && 
                "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed!"
            echo "OVERALL_STATUS=success" >> $GITHUB_ENV
          else
            echo "‚ùå Some tests failed"
            echo "OVERALL_STATUS=failure" >> $GITHUB_ENV
          fi
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.OVERALL_STATUS;
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            const message = `${emoji} **Test Summary**\n\n` +
              `- Code Quality: ${{ needs.code-quality.result }}\n` +
              `- Dependency Check: ${{ needs.dependency-check.result }}\n` +
              `- Unit Tests: ${{ needs.unit-tests.result }}\n` +
              `- Integration Tests: ${{ needs.integration-tests.result }}\n\n` +
              `Overall Status: **${status}**`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });