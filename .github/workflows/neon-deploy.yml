name: Neon DB Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  NEON_API_URL: 'https://console.neon.tech/api/v2'

jobs:
  # Job 1: Validate and Test
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      target_env: ${{ steps.check.outputs.target_env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run build

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test

      - name: Validate Prisma schema
        run: npx prisma validate

      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "target_env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "target_env=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "target_env=staging" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "target_env=none" >> $GITHUB_OUTPUT
          fi

  # Job 2: Database Migration Test
  migration_test:
    name: Test Database Migration
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test migration on local PostgreSQL
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        run: npm run test:integration

  # Job 3: Neon DB Deployment
  deploy:
    name: Deploy to Neon DB
    runs-on: ubuntu-latest
    needs: [validate, migration_test]
    if: needs.validate.outputs.should_deploy == 'true'
    environment: ${{ needs.validate.outputs.target_env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Neon environment
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
          TARGET_ENV: ${{ needs.validate.outputs.target_env }}
        run: |
          echo "Configuring Neon for environment: $TARGET_ENV"
          
          # Set environment-specific variables
          if [[ "$TARGET_ENV" == "production" ]]; then
            echo "NEON_BRANCH_NAME=main" >> $GITHUB_ENV
            echo "NEON_ENDPOINT_ID=${{ secrets.NEON_PROD_ENDPOINT_ID }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.NEON_PROD_DATABASE_URL }}" >> $GITHUB_ENV
          else
            echo "NEON_BRANCH_NAME=staging" >> $GITHUB_ENV
            echo "NEON_ENDPOINT_ID=${{ secrets.NEON_STAGING_ENDPOINT_ID }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.NEON_STAGING_DATABASE_URL }}" >> $GITHUB_ENV
          fi

      - name: Create backup before deployment
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          echo "Creating pre-deployment backup..."
          node scripts/backup.js --type=snapshot --tag="pre-deploy-$(date +%Y%m%d-%H%M%S)"

      - name: Check Neon DB health
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          echo "Checking Neon DB health..."
          
          # Check endpoint status
          ENDPOINT_STATUS=$(curl -s -H "Authorization: Bearer $NEON_API_KEY" \
            "$NEON_API_URL/projects/$NEON_PROJECT_ID/endpoints/$NEON_ENDPOINT_ID" | \
            jq -r '.endpoint.current_state')
          
          if [[ "$ENDPOINT_STATUS" != "active" ]]; then
            echo "‚ùå Endpoint is not active: $ENDPOINT_STATUS"
            exit 1
          fi
          
          echo "‚úÖ Neon DB endpoint is healthy"

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "Running database migrations..."
          npx prisma migrate deploy
          
          # Verify migration success
          if ! npx prisma db execute --stdin <<< "SELECT 1;"; then
            echo "‚ùå Migration verification failed"
            exit 1
          fi
          
          echo "‚úÖ Migrations completed successfully"

      - name: Validate database integrity
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "Validating database integrity..."
          
          # Run custom validation script
          node scripts/validate-db.js
          
          # Check critical tables
          npx prisma db execute --stdin <<< "
            SELECT 
              schemaname, 
              tablename, 
              attname, 
              typename 
            FROM pg_tables t 
            JOIN pg_attribute a ON a.attrelid = t.tablename::regclass 
            JOIN pg_type ty ON ty.oid = a.atttypid 
            WHERE schemaname = 'public' 
            AND attnum > 0 
            AND NOT attisdropped
            ORDER BY tablename, attnum;
          "

      - name: Deploy application
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Deploying application..."
          
          # Install Vercel CLI
          npm i -g vercel@latest
          
          # Deploy to Vercel
          if [[ "${{ needs.validate.outputs.target_env }}" == "production" ]]; then
            vercel --prod --token=$VERCEL_TOKEN
          else
            vercel --token=$VERCEL_TOKEN
          fi

      - name: Run post-deployment tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "Running post-deployment tests..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Run health checks
          npm run test:health
          
          # Run smoke tests
          npm run test:smoke

      - name: Update monitoring
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
        run: |
          echo "Updating monitoring configuration..."
          
          # Start auto-scaling if not running
          if ! pgrep -f "neon-autoscaling.js"; then
            echo "Starting auto-scaling service..."
            nohup node scripts/neon-autoscaling.js > logs/autoscaling.log 2>&1 &
          fi
          
          # Update monitoring dashboard
          node scripts/update-monitoring.js

  # Job 4: Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: failure() && needs.validate.outputs.should_deploy == 'true'
    environment: ${{ needs.validate.outputs.target_env }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Perform automatic rollback
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PROJECT_ID }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "üö® Deployment failed - initiating automatic rollback..."
          
          # Find latest backup
          LATEST_BACKUP=$(node scripts/backup.js --list | grep "pre-deploy" | head -1)
          
          if [[ -n "$LATEST_BACKUP" ]]; then
            echo "Restoring from backup: $LATEST_BACKUP"
            node scripts/recovery.js --backup="$LATEST_BACKUP" --force
          else
            echo "‚ö†Ô∏è No recent backup found - manual intervention required"
          fi

      - name: Notify team of rollback
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "üö® Neon DB Deployment Rollback",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment failed and rollback was initiated*\n\n‚Ä¢ Environment: ${{ needs.validate.outputs.target_env }}\n‚Ä¢ Branch: ${{ github.ref_name }}\n‚Ä¢ Commit: ${{ github.sha }}\n‚Ä¢ Workflow: ${{ github.run_id }}"
                  }
                }
              ]
            }' \
            $SLACK_WEBHOOK

  # Job 5: Success Notification
  notify_success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: success() && needs.validate.outputs.should_deploy == 'true'
    
    steps:
      - name: Notify team of successful deployment
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "‚úÖ Neon DB Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment completed successfully*\n\n‚Ä¢ Environment: ${{ needs.validate.outputs.target_env }}\n‚Ä¢ Branch: ${{ github.ref_name }}\n‚Ä¢ Commit: ${{ github.sha }}\n‚Ä¢ Workflow: ${{ github.run_id }}\n‚Ä¢ Auto-scaling: Active"
                  }
                }
              ]
            }' \
            $SLACK_WEBHOOK