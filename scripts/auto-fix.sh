#!/bin/bash
# scripts/auto-fix.sh
# Script de corre√ß√£o autom√°tica de problemas do FisioFlow

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log com timestamp
log() {
    echo -e "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Fun√ß√£o para executar comando com retry
execute_with_retry() {
    local command="$1"
    local max_attempts="${2:-3}"
    local delay="${3:-5}"
    
    for ((i=1; i<=max_attempts; i++)); do
        log "${BLUE}Tentativa $i/$max_attempts: $command${NC}"
        
        if eval "$command"; then
            log "${GREEN}‚úÖ Comando executado com sucesso${NC}"
            return 0
        else
            if [ $i -lt $max_attempts ]; then
                log "${YELLOW}‚ö†Ô∏è Falha na tentativa $i, aguardando ${delay}s...${NC}"
                sleep $delay
            else
                log "${RED}‚ùå Comando falhou ap√≥s $max_attempts tentativas${NC}"
                return 1
            fi
        fi
    done
}

# Fun√ß√£o para backup de arquivos importantes
backup_files() {
    log "${BLUE}üíæ Criando backup de arquivos importantes...${NC}"
    
    local backup_dir="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Backup de arquivos cr√≠ticos
    local critical_files=(
        "package.json"
        "package-lock.json"
        ".env"
        "next.config.js"
        "tsconfig.json"
        "prisma/schema.prisma"
    )
    
    for file in "${critical_files[@]}"; do
        if [ -f "$file" ]; then
            cp "$file" "$backup_dir/"
            log "${GREEN}‚úÖ Backup de $file criado${NC}"
        fi
    done
    
    log "${GREEN}‚úÖ Backup criado em $backup_dir${NC}"
    echo "$backup_dir" > .last_backup
}

# Fun√ß√£o para limpar cache e arquivos tempor√°rios
clean_cache() {
    log "${BLUE}üßπ Limpando cache e arquivos tempor√°rios...${NC}"
    
    # Limpar cache do Next.js
    if [ -d ".next" ]; then
        rm -rf .next
        log "${GREEN}‚úÖ Cache do Next.js removido${NC}"
    fi
    
    # Limpar cache do Node.js
    if [ -d "node_modules/.cache" ]; then
        rm -rf node_modules/.cache
        log "${GREEN}‚úÖ Cache do Node.js removido${NC}"
    fi
    
    # Limpar cache do npm
    if command -v npm &> /dev/null; then
        npm cache clean --force
        log "${GREEN}‚úÖ Cache do npm limpo${NC}"
    fi
    
    # Limpar arquivos de log antigos
    find . -name "*.log" -type f -mtime +7 -delete 2>/dev/null || true
    log "${GREEN}‚úÖ Logs antigos removidos${NC}"
    
    # Limpar arquivos tempor√°rios
    rm -f typescript_errors.log eslint_errors.log build_status.log test_results.log
    rm -f railway_status.json neon_status.log
    log "${GREEN}‚úÖ Arquivos tempor√°rios removidos${NC}"
}

# Fun√ß√£o para reinstalar depend√™ncias
reinstall_dependencies() {
    log "${BLUE}üì¶ Reinstalando depend√™ncias...${NC}"
    
    # Remover node_modules e package-lock.json
    if [ -d "node_modules" ]; then
        rm -rf node_modules
        log "${GREEN}‚úÖ node_modules removido${NC}"
    fi
    
    if [ -f "package-lock.json" ]; then
        rm -f package-lock.json
        log "${GREEN}‚úÖ package-lock.json removido${NC}"
    fi
    
    # Reinstalar depend√™ncias
    execute_with_retry "npm install" 3 10
}

# Fun√ß√£o para regenerar Prisma
regenerate_prisma() {
    log "${BLUE}üîÑ Regenerando Prisma...${NC}"
    
    if [ -f "prisma/schema.prisma" ]; then
        # Gerar cliente Prisma
        execute_with_retry "npx prisma generate" 3 5
        
        # Executar migrations (se necess√°rio)
        if [ "$1" = "--with-migrate" ]; then
            log "${BLUE}üóÑÔ∏è Executando migrations...${NC}"
            execute_with_retry "npx prisma migrate deploy" 3 10
        fi
        
        log "${GREEN}‚úÖ Prisma regenerado com sucesso${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è Schema do Prisma n√£o encontrado${NC}"
    fi
}

# Fun√ß√£o para corrigir problemas de TypeScript
fix_typescript() {
    log "${BLUE}üìù Corrigindo problemas de TypeScript...${NC}"
    
    # Verificar e corrigir tsconfig.json
    if [ ! -f "tsconfig.json" ]; then
        log "${YELLOW}‚ö†Ô∏è tsconfig.json n√£o encontrado, criando...${NC}"
        npx tsc --init
    fi
    
    # Executar verifica√ß√£o de tipos
    if npx tsc --noEmit > typescript_fix.log 2>&1; then
        log "${GREEN}‚úÖ TypeScript sem erros${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è Erros de TypeScript encontrados, tentando corre√ß√£o autom√°tica...${NC}"
        
        # Tentar corrigir imports autom√°ticamente
        if command -v eslint &> /dev/null; then
            npm run lint -- --fix 2>/dev/null || true
            log "${GREEN}‚úÖ ESLint auto-fix executado${NC}"
        fi
    fi
}

# Fun√ß√£o para corrigir problemas de build
fix_build() {
    log "${BLUE}üî® Corrigindo problemas de build...${NC}"
    
    # Verificar next.config.js
    if [ ! -f "next.config.js" ] && [ ! -f "next.config.mjs" ]; then
        log "${YELLOW}‚ö†Ô∏è Configura√ß√£o do Next.js n√£o encontrada${NC}"
    fi
    
    # Tentar build
    if npm run build > build_fix.log 2>&1; then
        log "${GREEN}‚úÖ Build executado com sucesso${NC}"
    else
        log "${RED}‚ùå Build falhou, verifique build_fix.log${NC}"
        
        # Tentar corre√ß√µes comuns
        log "${BLUE}üîß Tentando corre√ß√µes comuns...${NC}"
        
        # Limpar cache novamente
        clean_cache
        
        # Reinstalar depend√™ncias cr√≠ticas
        npm install next react react-dom typescript @types/node @types/react @types/react-dom
        
        # Tentar build novamente
        if npm run build > build_fix_retry.log 2>&1; then
            log "${GREEN}‚úÖ Build corrigido com sucesso${NC}"
        else
            log "${RED}‚ùå Build ainda falhando ap√≥s corre√ß√µes${NC}"
            return 1
        fi
    fi
}

# Fun√ß√£o para corrigir problemas de banco de dados
fix_database() {
    log "${BLUE}üóÑÔ∏è Corrigindo problemas de banco de dados...${NC}"
    
    # Verificar conex√£o
    if node -e "require('./lib/prisma.ts').default.\$connect().then(() => console.log('OK')).catch(() => process.exit(1))" > /dev/null 2>&1; then
        log "${GREEN}‚úÖ Conex√£o com banco funcionando${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è Problemas de conex√£o com banco, tentando corre√ß√µes...${NC}"
        
        # Regenerar Prisma com migrations
        regenerate_prisma --with-migrate
        
        # Testar conex√£o novamente
        if node -e "require('./lib/prisma.ts').default.\$connect().then(() => console.log('OK')).catch(() => process.exit(1))" > /dev/null 2>&1; then
            log "${GREEN}‚úÖ Conex√£o com banco corrigida${NC}"
        else
            log "${RED}‚ùå Problemas de conex√£o persistem${NC}"
            return 1
        fi
    fi
}

# Fun√ß√£o para corrigir vari√°veis de ambiente
fix_environment() {
    log "${BLUE}üîß Verificando e corrigindo vari√°veis de ambiente...${NC}"
    
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            cp .env.example .env
            log "${YELLOW}‚ö†Ô∏è Arquivo .env criado a partir do .env.example${NC}"
            log "${RED}‚ùó IMPORTANTE: Configure as vari√°veis em .env${NC}"
        else
            log "${RED}‚ùå Arquivo .env e .env.example n√£o encontrados${NC}"
            return 1
        fi
    fi
    
    # Verificar vari√°veis cr√≠ticas
    local missing_vars=()
    local critical_vars=("DATABASE_URL" "NEXTAUTH_SECRET" "NEXTAUTH_URL")
    
    for var in "${critical_vars[@]}"; do
        if ! grep -q "^$var=" .env || grep -q "^$var=$" .env; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        log "${RED}‚ùå Vari√°veis n√£o configuradas: ${missing_vars[*]}${NC}"
        log "${YELLOW}‚ö†Ô∏è Configure essas vari√°veis em .env${NC}"
        return 1
    else
        log "${GREEN}‚úÖ Vari√°veis de ambiente configuradas${NC}"
    fi
}

# Fun√ß√£o para executar testes de valida√ß√£o
run_validation_tests() {
    log "${BLUE}üß™ Executando testes de valida√ß√£o...${NC}"
    
    local validation_errors=0
    
    # Teste de TypeScript
    if npx tsc --noEmit > /dev/null 2>&1; then
        log "${GREEN}‚úÖ TypeScript: OK${NC}"
    else
        log "${RED}‚ùå TypeScript: ERRO${NC}"
        ((validation_errors++))
    fi
    
    # Teste de Build
    if npm run build > /dev/null 2>&1; then
        log "${GREEN}‚úÖ Build: OK${NC}"
    else
        log "${RED}‚ùå Build: ERRO${NC}"
        ((validation_errors++))
    fi
    
    # Teste de Conex√£o com Banco
    if node -e "require('./lib/prisma.ts').default.\$connect().then(() => console.log('OK')).catch(() => process.exit(1))" > /dev/null 2>&1; then
        log "${GREEN}‚úÖ Banco de Dados: OK${NC}"
    else
        log "${RED}‚ùå Banco de Dados: ERRO${NC}"
        ((validation_errors++))
    fi
    
    return $validation_errors
}

# Fun√ß√£o principal
main() {
    log "${BLUE}üîß Iniciando corre√ß√£o autom√°tica do sistema FisioFlow...${NC}"
    
    local fix_errors=0
    local start_time=$(date +%s)
    
    # Criar backup
    backup_files
    
    # Executar corre√ß√µes em sequ√™ncia
    log "${YELLOW}üìã Executando corre√ß√µes autom√°ticas...${NC}"
    
    # 1. Limpar cache
    clean_cache || ((fix_errors++))
    
    # 2. Corrigir vari√°veis de ambiente
    fix_environment || ((fix_errors++))
    
    # 3. Reinstalar depend√™ncias
    reinstall_dependencies || ((fix_errors++))
    
    # 4. Regenerar Prisma
    regenerate_prisma || ((fix_errors++))
    
    # 5. Corrigir TypeScript
    fix_typescript || ((fix_errors++))
    
    # 6. Corrigir problemas de banco
    fix_database || ((fix_errors++))
    
    # 7. Corrigir build
    fix_build || ((fix_errors++))
    
    # Executar testes de valida√ß√£o
    log "${BLUE}üîç Executando valida√ß√£o final...${NC}"
    run_validation_tests
    local validation_errors=$?
    
    # Calcular tempo total
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # Gerar relat√≥rio
    log "${BLUE}üìä Gerando relat√≥rio de corre√ß√£o...${NC}"
    
    echo "" > auto_fix_report.txt
    echo "=== RELAT√ìRIO DE CORRE√á√ÉO AUTOM√ÅTICA ===" >> auto_fix_report.txt
    echo "Data: $(date)" >> auto_fix_report.txt
    echo "Dura√ß√£o: ${duration}s" >> auto_fix_report.txt
    echo "Erros de corre√ß√£o: $fix_errors" >> auto_fix_report.txt
    echo "Erros de valida√ß√£o: $validation_errors" >> auto_fix_report.txt
    echo "" >> auto_fix_report.txt
    
    if [ $fix_errors -eq 0 ] && [ $validation_errors -eq 0 ]; then
        log "${GREEN}üéâ Corre√ß√£o autom√°tica conclu√≠da com sucesso!${NC}"
        echo "Status: SUCESSO" >> auto_fix_report.txt
    elif [ $validation_errors -eq 0 ]; then
        log "${YELLOW}‚ö†Ô∏è Corre√ß√£o conclu√≠da com alguns problemas ($fix_errors erros de corre√ß√£o)${NC}"
        echo "Status: PARCIAL" >> auto_fix_report.txt
    else
        log "${RED}üö® Corre√ß√£o falhou ($fix_errors erros de corre√ß√£o, $validation_errors erros de valida√ß√£o)${NC}"
        echo "Status: FALHA" >> auto_fix_report.txt
    fi
    
    # Mostrar backup criado
    if [ -f ".last_backup" ]; then
        local backup_dir=$(cat .last_backup)
        echo "Backup criado em: $backup_dir" >> auto_fix_report.txt
        log "${BLUE}üíæ Backup dispon√≠vel em: $backup_dir${NC}"
    fi
    
    log "${BLUE}üìÑ Relat√≥rio salvo em auto_fix_report.txt${NC}"
    log "${GREEN}‚úÖ Corre√ß√£o autom√°tica finalizada${NC}"
    
    return $((fix_errors + validation_errors))
}

# Verificar argumentos
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Uso: $0 [op√ß√µes]"
    echo "Op√ß√µes:"
    echo "  --help, -h     Mostrar esta ajuda"
    echo "  --dry-run      Simular corre√ß√µes sem executar"
    echo "  --force        For√ßar corre√ß√µes mesmo com erros"
    exit 0
fi

if [ "$1" = "--dry-run" ]; then
    log "${YELLOW}üîç Modo simula√ß√£o - nenhuma altera√ß√£o ser√° feita${NC}"
    # Implementar modo dry-run se necess√°rio
    exit 0
fi

# Executar corre√ß√£o
main "$@"
exit $?