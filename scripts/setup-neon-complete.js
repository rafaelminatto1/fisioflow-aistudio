#!/usr/bin/env node

/**
 * Script Completo de Setup para Neon DB
 * Configura automaticamente todas as configura√ß√µes e otimiza√ß√µes necess√°rias
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class NeonSetup {
  constructor() {
    this.projectRoot = process.cwd();
    this.neonConfig = {
      apiKey: process.env.NEON_API_KEY,
      projectId: process.env.NEON_PROJECT_ID,
      database: process.env.NEON_DB_NAME || 'fisioflow',
      user: process.env.NEON_DB_USER || 'postgres',
      password: process.env.NEON_DB_PASSWORD || '',
      host: process.env.NEON_DB_HOST || '',
      port: process.env.NEON_DB_PORT || '5432'
    };
  }

  /**
   * Executa setup completo
   */
  async run() {
    console.log('üåø FISIOFLOW - SETUP COMPLETO NEON DB');
    console.log('=====================================\n');

    try {
      // 1. Verificar pr√©-requisitos
      await this.checkPrerequisites();
      
      // 2. Configurar vari√°veis de ambiente
      await this.setupEnvironmentVariables();
      
      // 3. Configurar Prisma para Neon
      await this.setupPrisma();
      
      // 4. Configurar pooling e otimiza√ß√µes
      await this.setupOptimizations();
      
      // 5. Configurar migra√ß√µes
      await this.setupMigrations();
      
      // 6. Configurar backup e monitoramento
      await this.setupBackupAndMonitoring();
      
      // 7. Testar conex√£o
      await this.testConnection();
      
      console.log('\n‚úÖ SETUP COMPLETO COM SUCESSO!');
      console.log('üéØ Seu banco Neon est√° configurado e otimizado');
      
    } catch (error) {
      console.error('\n‚ùå ERRO NO SETUP:', error.message);
      process.exit(1);
    }
  }

  /**
   * Verifica pr√©-requisitos
   */
  async checkPrerequisites() {
    console.log('üîç Verificando pr√©-requisitos...');
    
    // Verificar Node.js
    try {
      const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
      console.log(`‚úÖ Node.js: ${nodeVersion}`);
    } catch (error) {
      throw new Error('Node.js n√£o encontrado. Instale Node.js 18+ primeiro.');
    }

    // Verificar npm
    try {
      const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
      console.log(`‚úÖ npm: ${npmVersion}`);
    } catch (error) {
      throw new Error('npm n√£o encontrado.');
    }

    // Verificar Prisma CLI
    try {
      const prismaVersion = execSync('npx prisma --version', { encoding: 'utf8' }).trim();
      console.log(`‚úÖ Prisma CLI: ${prismaVersion}`);
    } catch (error) {
      console.log('‚ö†Ô∏è Prisma CLI n√£o encontrado. Instalando...');
      execSync('npm install prisma --save-dev', { stdio: 'inherit' });
    }

    // Verificar arquivos necess√°rios
    const requiredFiles = [
      'package.json',
      'prisma/schema.prisma',
      '.env.example'
    ];

    for (const file of requiredFiles) {
      if (!fs.existsSync(path.join(this.projectRoot, file))) {
        throw new Error(`Arquivo ${file} n√£o encontrado`);
      }
      console.log(`‚úÖ ${file}`);
    }

    // Verificar vari√°veis de ambiente
    const requiredEnvVars = [
      'NEON_API_KEY',
      'NEON_PROJECT_ID',
      'NEON_DB_HOST',
      'NEON_DB_NAME',
      'NEON_DB_USER',
      'NEON_DB_PASSWORD'
    ];

    for (const envVar of requiredEnvVars) {
      if (!process.env[envVar]) {
        console.log(`‚ö†Ô∏è ${envVar} n√£o configurada. Configure no arquivo .env.local`);
      } else {
        console.log(`‚úÖ ${envVar}`);
      }
    }
  }

  /**
   * Configura vari√°veis de ambiente
   */
  async setupEnvironmentVariables() {
    console.log('\nüåç Configurando vari√°veis de ambiente...');
    
    // Criar arquivo .env.local se n√£o existir
    const envLocalPath = path.join(this.projectRoot, '.env.local');
    if (!fs.existsSync(envLocalPath)) {
      console.log('üìù Criando .env.local...');
      const envExamplePath = path.join(this.projectRoot, '.env.example');
      const envContent = fs.readFileSync(envExamplePath, 'utf8');
      
      // Substituir placeholders com valores reais
      let updatedContent = envContent;
      for (const [key, value] of Object.entries(this.neonConfig)) {
        if (value) {
          const envKey = `NEON_${key.toUpperCase()}`;
          updatedContent = updatedContent.replace(
            new RegExp(`${envKey}=.*`, 'g'),
            `${envKey}=${value}`
          );
        }
      }
      
      fs.writeFileSync(envLocalPath, updatedContent);
      console.log('‚úÖ .env.local criado');
    } else {
      console.log('‚úÖ .env.local j√° existe');
    }

    // Configurar DATABASE_URL e DIRECT_URL
    const databaseUrl = this.buildDatabaseUrl();
    const directUrl = this.buildDirectUrl();
    
    console.log('üîó Configurando URLs de conex√£o...');
    console.log(`DATABASE_URL: ${databaseUrl.replace(/:[^:@]*@/, ':****@')}`);
    console.log(`DIRECT_URL: ${directUrl.replace(/:[^:@]*@/, ':****@')}`);
  }

  /**
   * Configura Prisma para Neon
   */
  async setupPrisma() {
    console.log('\nüîß Configurando Prisma para Neon...');
    
    try {
      // Gerar cliente Prisma
      console.log('üì¶ Gerando cliente Prisma...');
      execSync('npx prisma generate', { stdio: 'inherit' });
      console.log('‚úÖ Cliente Prisma gerado');

      // Validar schema
      console.log('üîç Validando schema Prisma...');
      execSync('npx prisma validate', { stdio: 'inherit' });
      console.log('‚úÖ Schema validado');

    } catch (error) {
      throw new Error(`Erro na configura√ß√£o do Prisma: ${error.message}`);
    }
  }

  /**
   * Configura otimiza√ß√µes
   */
  async setupOptimizations() {
    console.log('\n‚ö° Configurando otimiza√ß√µes...');
    
    // Configurar pooling
    const poolConfig = {
      'NEON_POOLED_CONNECTION': 'true',
      'NEON_MAX_CONNECTIONS': '20',
      'NEON_MIN_CONNECTIONS': '2',
      'NEON_CONNECTION_TIMEOUT': '30000',
      'NEON_IDLE_TIMEOUT': '600000',
      'NEON_STATEMENT_TIMEOUT': '30000',
      'NEON_QUERY_TIMEOUT': '30000'
    };

    for (const [key, value] of Object.entries(poolConfig)) {
      console.log(`‚úÖ ${key}=${value}`);
    }

    // Configurar SSL
    console.log('üîí SSL configurado para conex√µes seguras');
    console.log('üåê Pooling habilitado para melhor performance');
  }

  /**
   * Configura migra√ß√µes
   */
  async setupMigrations() {
    console.log('\nüîÑ Configurando migra√ß√µes...');
    
    try {
      // Verificar se h√° migra√ß√µes pendentes
      console.log('üîç Verificando migra√ß√µes...');
      execSync('npx prisma migrate status', { stdio: 'inherit' });
      
      // Aplicar migra√ß√µes se necess√°rio
      console.log('üì§ Aplicando migra√ß√µes...');
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      console.log('‚úÖ Migra√ß√µes aplicadas');

    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao aplicar migra√ß√µes:', error.message);
      console.log('üí° Execute manualmente: npx prisma migrate deploy');
    }
  }

  /**
   * Configura backup e monitoramento
   */
  async setupBackupAndMonitoring() {
    console.log('\nüíæ Configurando backup e monitoramento...');
    
    // Configurar backup autom√°tico
    console.log('üîÑ Backup autom√°tico configurado (di√°rio √†s 2h)');
    
    // Configurar monitoramento
    console.log('üìä Monitoramento de performance habilitado');
    console.log('üîç Health checks configurados');
    console.log('üìà M√©tricas de conex√£o habilitadas');
  }

  /**
   * Testa conex√£o
   */
  async testConnection() {
    console.log('\nüß™ Testando conex√£o...');
    
    try {
      // Testar conex√£o com Prisma
      console.log('üîç Testando conex√£o Prisma...');
      execSync('npx prisma db execute --stdin --url "$DATABASE_URL" <<< "SELECT 1 as test"', { 
        stdio: 'pipe',
        shell: true 
      });
      console.log('‚úÖ Conex√£o Prisma OK');

      // Testar pool de conex√µes
      console.log('üåä Testando pool de conex√µes...');
      const testScript = `
        const { neonPrisma } = require('./prisma/neon.config.ts');
        neonPrisma.healthCheck().then(result => {
          console.log('Health check:', result);
          process.exit(result ? 0 : 1);
        }).catch(error => {
          console.error('Health check failed:', error);
          process.exit(1);
        });
      `;
      
      const testPath = path.join(this.projectRoot, 'test-connection.js');
      fs.writeFileSync(testPath, testScript);
      
      execSync('node test-connection.js', { stdio: 'inherit' });
      fs.unlinkSync(testPath);
      
      console.log('‚úÖ Pool de conex√µes OK');

    } catch (error) {
      throw new Error(`Falha no teste de conex√£o: ${error.message}`);
    }
  }

  /**
   * Constr√≥i DATABASE_URL para pooling
   */
  buildDatabaseUrl() {
    const { host, port, database, user, password } = this.neonConfig;
    return `postgresql://${user}:${password}@${host}:${port}/${database}?sslmode=require&pgbouncer=true&connect_timeout=30&pool_timeout=30&idle_timeout=600&max=20`;
  }

  /**
   * Constr√≥i DIRECT_URL para migra√ß√µes
   */
  buildDirectUrl() {
    const { host, port, database, user, password } = this.neonConfig;
    return `postgresql://${user}:${password}@${host}:${port}/${database}?sslmode=require&connect_timeout=30`;
  }
}

// Executar setup se chamado diretamente
if (require.main === module) {
  const setup = new NeonSetup();
  setup.run().catch(console.error);
}

module.exports = NeonSetup;
