#!/usr/bin/env node

/**
 * Script para Completar o Banco de Dados
 * Adiciona SOAP Notes e Communication Logs faltantes
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function completeDatabase() {
  console.log('üîß COMPLETANDO BANCO DE DADOS NEON - FISIOFLOW');
  console.log('================================================\n');

  try {
    await prisma.$connect();

    // 1. Criar SOAP Notes para os agendamentos existentes
    console.log('üìù CRIANDO SOAP NOTES:');
    console.log('========================');

    const appointments = await prisma.appointment.findMany({
      include: {
        patient: { select: { name: true } },
        therapist: { select: { name: true } }
      }
    });

    for (const appointment of appointments) {
      console.log(`   üìã Criando SOAP Note para agendamento ${appointment.id}...`);
      
      const soapNoteData = {
        appointmentId: appointment.id,
        subjective: generateSubjective(appointment),
        objective: generateObjective(appointment),
        assessment: generateAssessment(appointment),
        plan: generatePlan(appointment)
      };

      const soapNote = await prisma.soapNote.create({
        data: soapNoteData
      });

      console.log(`      ‚úÖ SOAP Note criado: ${soapNote.id}`);
      console.log(`      Paciente: ${appointment.patient.name}`);
      console.log(`      Terapeuta: ${appointment.therapist.name}`);
      console.log('');
    }

    // 2. Criar Communication Logs
    console.log('üí¨ CRIANDO COMMUNICATION LOGS:');
    console.log('===============================');

    const patients = await prisma.patient.findMany();
    const users = await prisma.user.findMany({ where: { role: { in: ['Fisioterapeuta', 'EducadorFisico'] } } });

    for (const patient of patients) {
      console.log(`   üìã Criando logs para paciente ${patient.name}...`);
      
      // Log de agendamento
      const appointmentLog = await prisma.communicationLog.create({
        data: {
          patientId: patient.id,
          userId: users[0].id, // Primeiro terapeuta
          type: 'WhatsApp',
          notes: `Agendamento confirmado para ${patient.name}. Lembretes enviados via WhatsApp.`
        }
      });
      console.log(`      ‚úÖ Log de agendamento criado: ${appointmentLog.id}`);

      // Log de avalia√ß√£o inicial
      const evaluationLog = await prisma.communicationLog.create({
        data: {
          patientId: patient.id,
          userId: users[0].id,
          type: 'Email',
          notes: `Avalia√ß√£o inicial realizada. Relat√≥rio enviado por email para ${patient.email}.`
        }
      });
      console.log(`      ‚úÖ Log de avalia√ß√£o criado: ${evaluationLog.id}`);

      // Log de acompanhamento
      const followUpLog = await prisma.communicationLog.create({
        data: {
          patientId: patient.id,
          userId: users[0].id,
          type: 'Ligacao',
          notes: `Acompanhamento telef√¥nico realizado. Paciente reporta melhora significativa.`
        }
      });
      console.log(`      ‚úÖ Log de acompanhamento criado: ${followUpLog.id}`);
      
      console.log('');
    }

    // 3. Verificar dados completos
    console.log('üîç VERIFICANDO DADOS COMPLETOS:');
    console.log('=================================');

    const finalCounts = await Promise.all([
      prisma.user.count(),
      prisma.patient.count(),
      prisma.appointment.count(),
      prisma.painPoint.count(),
      prisma.metricResult.count(),
      prisma.soapNote.count(),
      prisma.communicationLog.count()
    ]);

    console.log(`üë• Users: ${finalCounts[0]} registros`);
    console.log(`üè• Patients: ${finalCounts[1]} registros`);
    console.log(`üìÖ Appointments: ${finalCounts[2]} registros`);
    console.log(`üíä Pain Points: ${finalCounts[3]} registros`);
    console.log(`üìè Metric Results: ${finalCounts[4]} registros`);
    console.log(`üìù SOAP Notes: ${finalCounts[5]} registros`);
    console.log(`üí¨ Communication Logs: ${finalCounts[6]} registros`);

    // 4. Status final
    console.log('\nüìä STATUS FINAL:');
    console.log('==================');
    
    const totalRecords = finalCounts.reduce((sum, count) => sum + count, 0);
    console.log(`üìä Total de registros: ${totalRecords}`);
    
    if (finalCounts[5] > 0 && finalCounts[6] > 0) {
      console.log('‚úÖ Banco de dados COMPLETO!');
      console.log('   - SOAP Notes criados para todos os agendamentos');
      console.log('   - Communication Logs adicionados para todos os pacientes');
      console.log('   - Sistema pronto para uso em produ√ß√£o');
    }

    console.log('\nüéØ PR√ìXIMO PASSO:');
    console.log('   O banco est√° completo e pronto para desenvolvimento da aplica√ß√£o');

  } catch (error) {
    console.error('‚ùå Erro ao completar banco:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Fun√ß√µes auxiliares para gerar dados realistas
function generateSubjective(appointment) {
  const patientName = appointment.patient.name;
  
  if (appointment.type === 'Avaliacao') {
    return `${patientName} relata dor no joelho direito h√° 3 semanas, piorando ao subir escadas e ao agachar. Paciente refere limita√ß√£o para atividades di√°rias e esportivas.`;
  } else if (appointment.type === 'Sessao') {
    return `${patientName} refere melhora da dor ap√≥s sess√µes anteriores. Relata ainda desconforto leve ao realizar movimentos espec√≠ficos.`;
  }
  
  return `${patientName} comparece para ${appointment.type.toLowerCase()}.`;
}

function generateObjective(appointment) {
  const patientName = appointment.patient.name;
  
  if (appointment.type === 'Avaliacao') {
    return `Exame f√≠sico: Edema discreto em joelho D, crepita√ß√£o patelar, ADM limitada (flex√£o 85¬∞, extens√£o -5¬∞). Teste de compress√£o patelar positivo. For√ßa muscular grau 4/5.`;
  } else if (appointment.type === 'Sessao') {
    return `Reavalia√ß√£o: Edema reduzido, ADM melhorada (flex√£o 95¬∞, extens√£o 0¬∞). For√ßa muscular grau 4+/5. Paciente tolera melhor carga.`;
  }
  
  return `Avalia√ß√£o espec√≠fica para ${appointment.type.toLowerCase()}.`;
}

function generateAssessment(appointment) {
  if (appointment.type === 'Avaliacao') {
    return 'S√≠ndrome patelofemoral com componente inflamat√≥rio. Necessita de programa de reabilita√ß√£o progressiva.';
  } else if (appointment.type === 'Sessao') {
    return 'Evolu√ß√£o favor√°vel do quadro. Manter protocolo de fortalecimento e alongamento.';
  }
  
  return 'Avalia√ß√£o espec√≠fica necess√°ria.';
}

function generatePlan(appointment) {
  if (appointment.type === 'Avaliacao') {
    return '1. Crioterapia para controle de edema\n2. Exerc√≠cios de fortalecimento de quadr√≠ceps\n3. Alongamentos de cadeia posterior\n4. Retorno em 1 semana para reavalia√ß√£o';
  } else if (appointment.type === 'Sessao') {
    return '1. Continuar protocolo de fortalecimento\n2. Progress√£o de carga nos exerc√≠cios\n3. Incluir exerc√≠cios funcionais\n4. Pr√≥xima sess√£o em 3 dias';
  }
  
  return 'Plano espec√≠fico ser√° definido ap√≥s avalia√ß√£o.';
}

// Executar se chamado diretamente
if (require.main === module) {
  completeDatabase().catch(console.error);
}

module.exports = completeDatabase;
