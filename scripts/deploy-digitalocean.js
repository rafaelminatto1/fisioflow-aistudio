#!/usr/bin/env node

/**
 * FisioFlow - DigitalOcean Deploy Script
 * Automatiza o processo de deploy no DigitalOcean App Platform
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class DigitalOceanDeployer {
  constructor() {
    this.projectRoot = process.cwd();
    this.envFile = path.join(this.projectRoot, '.env.production');
    this.dockerFile = path.join(this.projectRoot, 'Dockerfile');
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const colors = {
      info: '\x1b[36m',
      success: '\x1b[32m',
      warning: '\x1b[33m',
      error: '\x1b[31m',
      reset: '\x1b[0m'
    };
    
    console.log(`${colors[type]}[${timestamp}] ${message}${colors.reset}`);
  }

  async validateEnvironment() {
    this.log('üîç Validando ambiente de produ√ß√£o...');
    
    // Verificar se .env.production existe
    if (!fs.existsSync(this.envFile)) {
      this.log('‚ùå Arquivo .env.production n√£o encontrado!', 'error');
      this.log('üí° Copie .env.production.example para .env.production e configure as vari√°veis', 'warning');
      process.exit(1);
    }

    // Verificar Dockerfile
    if (!fs.existsSync(this.dockerFile)) {
      this.log('‚ùå Dockerfile n√£o encontrado!', 'error');
      process.exit(1);
    }

    // Verificar vari√°veis cr√≠ticas
    const envContent = fs.readFileSync(this.envFile, 'utf8');
    const criticalVars = [
      'DATABASE_URL',
      'NEXTAUTH_SECRET',
      'NEXTAUTH_URL'
    ];

    const missingVars = criticalVars.filter(varName => 
      !envContent.includes(`${varName}=`) || 
      envContent.includes(`${varName}=your-`) ||
      envContent.includes(`${varName}=sk-xxx`)
    );

    if (missingVars.length > 0) {
      this.log(`‚ùå Vari√°veis de ambiente n√£o configuradas: ${missingVars.join(', ')}`, 'error');
      process.exit(1);
    }

    this.log('‚úÖ Ambiente validado com sucesso!', 'success');
  }

  async runTests(skipTests = false) {
    if (skipTests) {
      this.log('‚è≠Ô∏è Pulando testes (--skip-tests fornecido)...', 'warning');
      return;
    }
    
    this.log('üß™ Executando testes...');
    
    try {
      execSync('npm run test:ci', { stdio: 'inherit' });
      this.log('‚úÖ Testes passaram!', 'success');
    } catch (error) {
      this.log('‚ùå Testes falharam!', 'error');
      this.log('üí° Corrija os testes antes de fazer deploy', 'warning');
      process.exit(1);
    }
  }

  async buildProject() {
    this.log('üèóÔ∏è Fazendo build do projeto...');
    
    try {
      execSync('npm run build', { stdio: 'inherit' });
      this.log('‚úÖ Build conclu√≠do com sucesso!', 'success');
    } catch (error) {
      this.log('‚ùå Build falhou!', 'error');
      process.exit(1);
    }
  }

  async validateDocker() {
    this.log('üê≥ Validando Dockerfile...');
    
    try {
      // Verificar se Docker est√° dispon√≠vel
      execSync('docker --version', { stdio: 'pipe' });
      
      // Build da imagem Docker
      this.log('üì¶ Fazendo build da imagem Docker...');
      execSync('docker build -t fisioflow-test .', { stdio: 'inherit' });
      
      this.log('‚úÖ Dockerfile validado com sucesso!', 'success');
    } catch (error) {
      this.log('‚ö†Ô∏è Docker n√£o dispon√≠vel ou build falhou', 'warning');
      this.log('üí° Certifique-se de que o Docker est√° instalado e funcionando', 'warning');
    }
  }

  async checkGitStatus() {
    this.log('üìù Verificando status do Git...');
    
    try {
      const status = execSync('git status --porcelain', { encoding: 'utf8' });
      
      if (status.trim()) {
        this.log('‚ö†Ô∏è Existem altera√ß√µes n√£o commitadas:', 'warning');
        console.log(status);
        this.log('üí° Commit suas altera√ß√µes antes do deploy', 'warning');
        
        const readline = require('readline').createInterface({
          input: process.stdin,
          output: process.stdout
        });
        
        const answer = await new Promise(resolve => {
          readline.question('Deseja continuar mesmo assim? (y/N): ', resolve);
        });
        
        readline.close();
        
        if (answer.toLowerCase() !== 'y') {
          process.exit(1);
        }
      }
      
      this.log('‚úÖ Git status verificado!', 'success');
    } catch (error) {
      this.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar o Git status', 'warning');
    }
  }

  async generateAppSpec() {
    this.log('üìã Gerando App Spec para DigitalOcean...');
    
    const appSpec = {
      name: 'fisioflow',
      services: [{
        name: 'web',
        source_dir: '/',
        github: {
          repo: 'seu-usuario/fisioflow-aistudio', // Ser√° atualizado manualmente
          branch: 'main',
          deploy_on_push: true
        },
        run_command: 'npm start',
        environment_slug: 'node-js',
        instance_count: 1,
        instance_size_slug: 'professional-xs',
        http_port: 3000,
        routes: [{ path: '/' }],
        health_check: {
          http_path: '/api/health',
          initial_delay_seconds: 60,
          period_seconds: 10,
          timeout_seconds: 5,
          success_threshold: 1,
          failure_threshold: 3
        },
        envs: [
          { key: 'NODE_ENV', value: 'production' },
          { key: 'NEXT_TELEMETRY_DISABLED', value: '1' },
          { key: 'PORT', value: '3000' }
        ]
      }],
      databases: [{
        name: 'fisioflow-db',
        engine: 'PG',
        version: '14',
        size: 'db-s-1vcpu-1gb'
      }]
    };

    const specPath = path.join(this.projectRoot, '.do', 'app.yaml');
    
    // Criar diret√≥rio .do se n√£o existir
    const doDir = path.dirname(specPath);
    if (!fs.existsSync(doDir)) {
      fs.mkdirSync(doDir, { recursive: true });
    }

    fs.writeFileSync(specPath, `# DigitalOcean App Platform Spec\n# Generated automatically - do not edit manually\n\n${JSON.stringify(appSpec, null, 2)}`);
    
    this.log(`‚úÖ App Spec gerado em: ${specPath}`, 'success');
  }

  async showDeployInstructions() {
    this.log('üöÄ Instru√ß√µes de Deploy:', 'success');
    console.log(`
üìã Pr√≥ximos passos:

1. Acesse: https://cloud.digitalocean.com/apps
2. Clique em "Create App"
3. Conecte seu reposit√≥rio GitHub
4. Configure as vari√°veis de ambiente:
   - DATABASE_URL (do Managed Database)
   - NEXTAUTH_SECRET
   - NEXTAUTH_URL
   - Outras vari√°veis do .env.production

5. Selecione o plano:
   - App: Professional ($25/m√™s)
   - Database: Basic ($15/m√™s)

6. Clique em "Create Resources"

üí° Documenta√ß√£o completa em: .trae/documents/deploy-digitalocean-fisioflow.md
`);
  }

  async deploy(options = {}) {
    try {
      this.log('üöÄ Iniciando processo de deploy para DigitalOcean...', 'success');
      
      await this.validateEnvironment();
      await this.checkGitStatus();
      await this.runTests(options.skipTests);
      await this.buildProject();
      await this.validateDocker();
      await this.generateAppSpec();
      await this.showDeployInstructions();
      
      this.log('‚úÖ Prepara√ß√£o para deploy conclu√≠da com sucesso!', 'success');
      this.log('üéâ Seu projeto est√° pronto para deploy no DigitalOcean!', 'success');
      
    } catch (error) {
      this.log(`‚ùå Erro durante o deploy: ${error.message}`, 'error');
      process.exit(1);
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const args = process.argv.slice(2);
  const skipTests = args.includes('--skip-tests');
  
  const deployer = new DigitalOceanDeployer();
  deployer.deploy({ skipTests });
}

module.exports = DigitalOceanDeployer;