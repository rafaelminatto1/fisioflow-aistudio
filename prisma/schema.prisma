generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String                  @id @default(cuid())
  name                   String
  email                  String                  @unique
  passwordHash           String?                 @map("password_hash")
  role                   Role
  avatarUrl              String?                 @map("avatar_url")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  appointments           Appointment[]
  communicationLogs      CommunicationLog[]
  analyticsEvents        AnalyticsEvent[]
  sessionMetrics         SessionMetric[]
  customMetrics          CustomMetric[]
  financialTransactions  FinancialTransaction[]
  professionalPayouts    ProfessionalPayout[]
  inventoryLogs          InventoryLog[]

  @@map("users")
}

model Patient {
  id                     String                  @id @default(cuid())
  name                   String
  cpf                    String                  @unique
  email                  String?
  phone                  String?
  birthDate              DateTime?               @map("birth_date")
  address                Json?
  emergencyContact       Json?                   @map("emergency_contact")
  status                 PatientStatus           @default(Active)
  lastVisit              DateTime?               @map("last_visit")
  allergies              String?
  medicalAlerts          String?                 @map("medical_alerts")
  consentGiven           Boolean                 @default(false) @map("consent_given")
  whatsappConsent        WhatsAppConsent         @default(opt_out) @map("whatsapp_consent")
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  appointments           Appointment[]
  communicationLogs      CommunicationLog[]
  metricResults          MetricResult[]
  painPoints             PainPoint[]
  payments               Payment[]
  assessmentResults      AssessmentResult[]
  financialTransactions  FinancialTransaction[]

  @@map("patients")
}

model Appointment {
  id                String             @id @default(cuid())
  patientId         String             @map("patient_id")
  therapistId       String             @map("therapist_id")
  startTime         DateTime           @map("start_time")
  endTime           DateTime           @map("end_time")
  type              AppointmentType
  status            AppointmentStatus  @default(Agendado)
  value             Decimal?           @db.Decimal(10, 2)
  paymentStatus     PaymentStatus      @default(pending) @map("payment_status")
  observations      String?
  seriesId          String?            @map("series_id")
  sessionNumber     Int?               @map("session_number")
  totalSessions     Int?               @map("total_sessions")
  createdAt         DateTime           @default(now()) @map("created_at")
  patient           Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist         User               @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  soapNotes         SoapNote[]
  assessmentResults AssessmentResult[]

  @@index([patientId])
  @@index([therapistId])
  @@index([startTime])
  @@map("appointments")
}

model PainPoint {
  id          String   @id @default(cuid())
  patientId   String   @map("patient_id")
  xPosition   Float    @map("x_position")
  yPosition   Float    @map("y_position")
  intensity   Int      @db.SmallInt
  type        PainType
  description String?
  bodyPart    BodyPart @map("body_part")
  createdAt   DateTime @default(now()) @map("created_at")
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([createdAt(sort: Desc)])
  @@map("pain_points")
}

model MetricResult {
  id         String   @id @default(cuid())
  patientId  String   @map("patient_id")
  metricName String   @map("metric_name")
  value      Float
  unit       String
  measuredAt DateTime @default(now()) @map("measured_at")
  patient    Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([measuredAt(sort: Desc)])
  @@map("metric_results")
}

model SoapNote {
  id            String      @id @default(cuid())
  appointmentId String      @map("appointment_id")
  subjective    String?
  objective     String?
  assessment    String?
  plan          String?
  createdAt     DateTime    @default(now()) @map("created_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("soap_notes")
}

model CommunicationLog {
  id        String            @id @default(cuid())
  patientId String            @map("patient_id")
  userId    String            @map("user_id")
  type      CommunicationType
  notes     String
  createdAt DateTime          @default(now()) @map("created_at")
  patient   Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([createdAt(sort: Desc)])
  @@map("communication_logs")
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String?       @map("appointment_id")
  patientId     String        @map("patient_id")
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(pending)
  method        PaymentMethod @default(cash)
  description   String?
  dueDate       DateTime?     @map("due_date")
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  patient       Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("payments")
}

model AnalyticsEvent {
  id         String                 @id @default(cuid())
  userId     String?                @map("user_id")
  eventType  String                 @map("event_type")
  category   AnalyticsEventCategory
  properties Json?
  sessionId  String?                @map("session_id")
  createdAt  DateTime               @default(now()) @map("created_at")
  user       User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([eventType])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("analytics_events")
}

model SessionMetric {
  id            String   @id @default(cuid())
  sessionId     String   @map("session_id")
  userId        String?  @map("user_id")
  startTime     DateTime @map("start_time")
  endTime       DateTime? @map("end_time")
  duration      Int?     // Duration in seconds
  pageViews     Int      @default(0) @map("page_views")
  interactions  Int      @default(0)
  deviceType    String?  @map("device_type")
  browserAgent  String?  @map("browser_agent")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([startTime(sort: Desc)])
  @@map("session_metrics")
}

model RealTimeMetric {
  id           String             @id @default(cuid())
  metricType   RealTimeMetricType @map("metric_type")
  value        Float
  metadata     Json?
  timestamp    DateTime           @default(now())

  @@index([metricType])
  @@index([timestamp(sort: Desc)])
  @@map("real_time_metrics")
}

model DailyAggregation {
  id               String                  @id @default(cuid())
  date             DateTime                @db.Date
  aggregationType  DailyAggregationType    @map("aggregation_type")
  totalValue       Float                   @map("total_value")
  avgValue         Float?                  @map("avg_value")
  maxValue         Float?                  @map("max_value")
  minValue         Float?                  @map("min_value")
  recordCount      Int                     @map("record_count")
  metadata         Json?
  createdAt        DateTime                @default(now()) @map("created_at")

  @@unique([date, aggregationType])
  @@index([date(sort: Desc)])
  @@index([aggregationType])
  @@map("daily_aggregations")
}

model CustomMetric {
  id          String   @id @default(cuid())
  name        String
  description String?
  value       Float
  unit        String?
  category    String?
  tags        Json?
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([name])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("custom_metrics")
}

enum Role {
  Admin
  Fisioterapeuta
  Paciente
  EducadorFisico
}

enum AppointmentType {
  Avaliacao
  Sessao
  Retorno
  Pilates
  Urgente
  Teleconsulta
}

enum AppointmentStatus {
  Agendado
  Realizado
  Concluido
  Cancelado
  Faltou
}

enum PaymentStatus {
  paid
  pending
}

enum PatientStatus {
  Active
  Inactive
  Discharged
}

enum PainType {
  latejante
  aguda
  queimacao
  formigamento
  cansaco
}

enum BodyPart {
  front
  back
}

enum CommunicationType {
  WhatsApp
  Ligacao
  Email
  Outro
}

enum WhatsAppConsent {
  opt_in
  opt_out
}

enum PaymentMethod {
  cash
  credit_card
  debit_card
  pix
  bank_transfer
  insurance
}

enum AnalyticsEventCategory {
  USER_ACTION
  SYSTEM_EVENT
  PERFORMANCE
  ERROR
  CUSTOM
}

enum RealTimeMetricType {
  ACTIVE_USERS
  PAGE_VIEWS
  SESSIONS
  RESPONSE_TIME
  ERROR_RATE
  CUSTOM
}

enum DailyAggregationType {
  APPOINTMENTS
  REVENUE
  USERS
  SESSIONS
  PAGE_VIEWS
  CUSTOM
}
// Clinical Content Library Models

model Pathology {
  id            String              @id @default(cuid())
  name          String              @unique
  description   String?
  symptoms      String[]            // Array of symptoms
  causes        String[]            // Array of causes
  icd10Code     String?             @map("icd10_code")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  protocols     TreatmentProtocol[]

  @@map("pathologies")
}

model Exercise {
  id                 String                        @id @default(cuid())
  name               String
  description        String?
  category           String
  subcategory        String?
  bodyParts          String[]                      @map("body_parts")
  difficulty         Int                           @db.SmallInt // 1-5 scale
  equipment          String[]
  instructions       String[]
  videoUrl           String?                       @map("video_url")
  thumbnailUrl       String?                       @map("thumbnail_url")
  duration           Int?                          // Duration in seconds
  indications        String[]
  contraindications  String[]
  modifications      Json?                         // {easier: string, harder: string}
  status             ExerciseStatus                @default(pending_approval)
  authorId           String?                       @map("author_id")
  createdAt          DateTime                      @default(now()) @map("created_at")
  updatedAt          DateTime                      @updatedAt @map("updated_at")
  protocolExercises  TreatmentProtocolExercise[]

  @@map("exercises")
}

model TreatmentProtocol {
  id                String                        @id @default(cuid())
  name              String
  description       String?
  pathologyId       String                        @map("pathology_id")
  frequency         String                        // e.g., "3x por semana"
  duration          String                        // e.g., "12 semanas"
  objectives        String[]
  contraindications String[]
  notes             String?
  createdBy         String                        @map("created_by")
  isActive          Boolean                       @default(true) @map("is_active")
  createdAt         DateTime                      @default(now()) @map("created_at")
  updatedAt         DateTime                      @updatedAt @map("updated_at")
  pathology         Pathology                     @relation(fields: [pathologyId], references: [id], onDelete: Cascade)
  exercises         TreatmentProtocolExercise[]

  @@map("treatment_protocols")
}

model TreatmentProtocolExercise {
  id                   String            @id @default(cuid())
  protocolId           String            @map("protocol_id")
  exerciseId           String            @map("exercise_id")
  order                Int               @db.SmallInt
  sets                 Int?              @db.SmallInt
  repetitions          String?           // Can be "15" or "30s"
  restTime             String?           @map("rest_time") // e.g., "30s"
  resistanceLevel      String?           @map("resistance_level")
  progressionCriteria  String?           @map("progression_criteria")
  notes                String?
  createdAt            DateTime          @default(now()) @map("created_at")
  protocol             TreatmentProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  exercise             Exercise          @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([protocolId, exerciseId])
  @@map("treatment_protocol_exercises")
}

model StandardizedAssessment {
  id            String              @id @default(cuid())
  name          String              @unique
  description   String?
  type          AssessmentType
  category      String              // e.g., "Mobilidade", "Qualidade de vida", "Dor"
  jsonFields    Json                @map("json_fields") // Assessment structure (questions, scales, etc.)
  scoringRules  Json                @map("scoring_rules") // Rules for calculating scores
  normValues    Json?               @map("norm_values") // Normal/reference values
  isActive      Boolean             @default(true) @map("is_active")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  results       AssessmentResult[]

  @@map("standardized_assessments")
}

model AssessmentResult {
  id            String                 @id @default(cuid())
  assessmentId  String                 @map("assessment_id")
  patientId     String                 @map("patient_id")
  appointmentId String?                @map("appointment_id")
  responses     Json                   // Patient's responses
  score         Float?
  interpretation String?              // e.g., "Normal", "Leve", "Moderado", "Severo"
  notes         String?
  evaluatedBy   String                 @map("evaluated_by") // User ID
  evaluatedAt   DateTime               @default(now()) @map("evaluated_at")
  assessment    StandardizedAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  patient       Patient                @relation(fields: [patientId], references: [id], onDelete: Cascade)
  appointment   Appointment?           @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@index([patientId])
  @@index([evaluatedAt(sort: Desc)])
  @@map("assessment_results")
}

// Financial Module Models

model FinancialTransaction {
  id          String                    @id @default(cuid())
  type        FinancialTransactionType
  amount      Decimal                   @db.Decimal(10, 2)
  description String
  date        DateTime
  patientId   String?                   @map("patient_id")
  userId      String                    @map("user_id")
  category    String?
  createdAt   DateTime                  @default(now()) @map("created_at")
  patient     Patient?                  @relation(fields: [patientId], references: [id], onDelete: SetNull)
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date(sort: Desc)])
  @@index([type])
  @@map("financial_transactions")
}

model ProfessionalPayout {
  id              String   @id @default(cuid())
  professionalId  String   @map("professional_id")
  period          String   // e.g., "2024-01"
  baseAmount      Decimal  @db.Decimal(10, 2) @map("base_amount")
  commissionRate  Decimal  @db.Decimal(5, 4) @map("commission_rate") // e.g., 0.7000 for 70%
  grossAmount     Decimal  @db.Decimal(10, 2) @map("gross_amount")
  deductions      Decimal  @default(0) @db.Decimal(10, 2)
  netAmount       Decimal  @db.Decimal(10, 2) @map("net_amount")
  status          PayoutStatus @default(pending)
  paidAt          DateTime? @map("paid_at")
  createdAt       DateTime @default(now()) @map("created_at")
  professional    User     @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, period])
  @@map("professional_payouts")
}

// Marketing Automation Models

model MarketingAutomation {
  id              String          @id @default(cuid())
  type            AutomationType
  name            String
  description     String?
  enabled         Boolean         @default(true)
  templateMessage String          @map("template_message")
  trigger         Json            // Trigger conditions (e.g., {"days_inactive": 90})
  lastRun         DateTime?       @map("last_run")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@map("marketing_automations")
}

// Inventory Models

model InventoryItem {
  id           String              @id @default(cuid())
  name         String
  description  String?
  quantity     Int
  minStockLevel Int                @map("min_stock_level")
  maxStockLevel Int?               @map("max_stock_level")
  unit         String
  unitCost     Decimal?            @db.Decimal(10, 2) @map("unit_cost")
  location     String?
  expiryDate   DateTime?           @map("expiry_date")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  movements    InventoryLog[]

  @@map("inventory_items")
}

model InventoryLog {
  id        String        @id @default(cuid())
  itemId    String        @map("item_id")
  change    Int           // Positive for additions, negative for subtractions
  reason    String
  userId    String        @map("user_id")
  createdAt DateTime      @default(now()) @map("created_at")
  item      InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([createdAt(sort: Desc)])
  @@map("inventory_logs")
}

// Enums

enum ExerciseStatus {
  approved
  pending_approval
}

enum AssessmentType {
  SCALE
  QUESTIONNAIRE
  FUNCTIONAL_TEST
  MEASUREMENT
}

enum FinancialTransactionType {
  INCOME
  EXPENSE
}

enum PayoutStatus {
  pending
  processing
  paid
  cancelled
}

enum AutomationType {
  NPS
  BIRTHDAY
  INACTIVITY_REMINDER
  APPOINTMENT_REMINDER
  FOLLOW_UP
}
