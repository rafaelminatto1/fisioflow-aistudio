generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model analytics_events {
  id         String                 @id
  user_id    String?
  event_type String
  category   AnalyticsEventCategory
  properties Json?
  session_id String?
  created_at DateTime               @default(now())
  users      users?                 @relation(fields: [user_id], references: [id])

  @@index([category])
  @@index([created_at(sort: Desc)])
  @@index([event_type])
}

model appointments {
  id                 String               @id
  patient_id         String
  therapist_id       String
  start_time         DateTime
  end_time           DateTime
  type               AppointmentType
  status             AppointmentStatus    @default(Agendado)
  value              Decimal?             @db.Decimal(10, 2)
  payment_status     PaymentStatus        @default(pending)
  observations       String?
  series_id          String?
  session_number     Int?
  total_sessions     Int?
  created_at         DateTime             @default(now())
  patients           patients             @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  users              users                @relation(fields: [therapist_id], references: [id], onDelete: Cascade)
  assessment_results assessment_results[]
  soap_notes         soap_notes[]

  @@index([patient_id])
  @@index([start_time])
  @@index([therapist_id])
}

model assessment_results {
  id                       String                   @id
  assessment_id            String
  patient_id               String
  appointment_id           String?
  responses                Json
  score                    Float?
  interpretation           String?
  notes                    String?
  evaluated_by             String
  evaluated_at             DateTime                 @default(now())
  appointments             appointments?            @relation(fields: [appointment_id], references: [id])
  standardized_assessments standardized_assessments @relation(fields: [assessment_id], references: [id], onDelete: Cascade)
  patients                 patients                 @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([evaluated_at(sort: Desc)])
  @@index([patient_id])
}

model communication_logs {
  id         String            @id
  patient_id String
  user_id    String
  type       CommunicationType
  notes      String
  created_at DateTime          @default(now())
  patients   patients          @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  users      users             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([patient_id])
}

model custom_metrics {
  id          String   @id
  name        String
  description String?
  value       Float
  unit        String?
  category    String?
  tags        Json?
  created_by  String?
  created_at  DateTime @default(now())
  updated_at  DateTime
  users       users?   @relation(fields: [created_by], references: [id])

  @@index([category])
  @@index([created_at(sort: Desc)])
  @@index([name])
}

model daily_aggregations {
  id               String               @id
  date             DateTime             @db.Date
  aggregation_type DailyAggregationType
  total_value      Float
  avg_value        Float?
  max_value        Float?
  min_value        Float?
  record_count     Int
  metadata         Json?
  created_at       DateTime             @default(now())

  @@unique([date, aggregation_type])
  @@index([aggregation_type])
  @@index([date(sort: Desc)])
}

model event_certificates {
  id                  String               @id
  event_id            String
  registration_id     String?              @unique
  provider_id         String?              @unique
  certificate_type    EventCertificateType
  certificate_code    String               @unique @db.VarChar(50)
  issued_at           DateTime             @default(now())
  view_count          Int                  @default(0)
  events              events               @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_providers     event_providers?     @relation(fields: [provider_id], references: [id])
  event_registrations event_registrations? @relation(fields: [registration_id], references: [id])

  @@index([event_id])
}

model event_communications {
  id               String               @id
  event_id         String
  campaign_name    String               @db.VarChar(200)
  message          String
  channel          CommunicationChannel
  target_audience  Json?
  scheduled_at     DateTime?
  sent_at          DateTime?
  recipients_count Int?
  delivered_count  Int?
  opened_count     Int?
  clicked_count    Int?
  events           events               @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
}

model event_providers {
  id                 String              @id
  event_id           String
  name               String              @db.VarChar(200)
  phone              String              @db.VarChar(20)
  professional_id    String?             @db.VarChar(50)
  pix_key            String?             @db.VarChar(200)
  hourly_rate        Decimal?            @db.Decimal(10, 2)
  availability       Json?
  status             EventProviderStatus @default(applied)
  application_date   DateTime            @default(now())
  confirmed_at       DateTime?
  payment_amount     Decimal?            @db.Decimal(10, 2)
  payment_date       DateTime?
  payment_receipt    String?             @db.VarChar(500)
  admin_notes        String?
  event_certificates event_certificates?
  events             events              @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
  @@index([phone])
}

model event_registrations {
  id                 String                  @id
  event_id           String
  full_name          String                  @db.VarChar(200)
  email              String                  @db.VarChar(100)
  phone              String?                 @db.VarChar(20)
  cpf                String?                 @db.VarChar(14)
  birth_date         DateTime?               @db.Date
  address            String?
  instagram          String?                 @db.VarChar(100)
  status             EventRegistrationStatus @default(pending)
  registration_date  DateTime                @default(now())
  qr_code            String?                 @unique
  checked_in_at      DateTime?
  checked_in_by_id   String?
  check_in_method    CheckInMethod?
  check_in_location  String?                 @db.VarChar(200)
  admin_notes        String?
  event_certificates event_certificates?
  users              users?                  @relation(fields: [checked_in_by_id], references: [id])
  events             events                  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([event_id])
}

model event_resources {
  id              String              @id
  event_id        String
  resource_name   String              @db.VarChar(200)
  resource_type   EventResourceType
  quantity_needed Int?
  start_time      DateTime?
  end_time        DateTime?
  status          EventResourceStatus @default(requested)
  events          events              @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@index([event_id])
}

model events {
  id                    String                 @id
  name                  String                 @db.VarChar(200)
  description           String?
  event_type            EventType
  start_date            DateTime
  end_date              DateTime
  location              String?                @db.VarChar(300)
  address               String?
  capacity              Int?
  is_free               Boolean                @default(true)
  price                 Decimal?               @db.Decimal(10, 2)
  status                EventStatus            @default(draft)
  organizer_id          String
  requires_registration Boolean                @default(true)
  allows_providers      Boolean                @default(false)
  whatsapp_group        String?                @db.VarChar(500)
  default_message       String?
  provider_rate         Decimal?               @db.Decimal(10, 2)
  banner_url            String?                @db.VarChar(500)
  images                Json?
  created_at            DateTime               @default(now())
  updated_at            DateTime
  event_certificates    event_certificates[]
  event_communications  event_communications[]
  event_providers       event_providers[]
  event_registrations   event_registrations[]
  event_resources       event_resources[]
  users                 users                  @relation(fields: [organizer_id], references: [id])

  @@index([organizer_id])
  @@index([start_date])
}

model exercises {
  id                           String                         @id
  name                         String
  description                  String?
  category                     String?
  subcategory                  String?
  body_parts                   String[]
  difficulty                   String?
  equipment                    String[]
  instructions                 String[]
  video_url                    String?
  thumbnail_url                String?
  duration                     Int?
  indications                  String[]
  contraindications            String[]
  modifications                Json?
  status                       ExerciseStatus                 @default(pending_approval)
  author_id                    String?
  therapeutic_goals            String?
  ai_categorized               Boolean                        @default(false)
  ai_confidence                Float?
  ai_categorized_at            DateTime?
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime
  exercise_approvals           exercise_approvals[]
  exercise_media               exercise_media[]
  treatment_protocol_exercises treatment_protocol_exercises[]

  @@index([category])
  @@index([ai_categorized])
  @@index([status])
}

model exercise_approvals {
  id           String                @id
  exercise_id  String
  status       ExerciseApprovalStatus @default(pending)
  ai_analysis  String?
  reviewer_id  String?
  submitted_by String
  submitted_at DateTime              @default(now())
  reviewed_at  DateTime?
  comments     String?
  metadata     Json?
  exercises    exercises             @relation(fields: [exercise_id], references: [id], onDelete: Cascade)
  reviewer     users?                @relation(fields: [reviewer_id], references: [id])

  @@index([exercise_id])
  @@index([status])
  @@index([submitted_at])
}

model exercise_media {
  id          String    @id
  exercise_id String
  type        MediaType
  url         String
  filename    String?
  quality     String?
  is_primary  Boolean   @default(false)
  created_at  DateTime  @default(now())
  exercises   exercises @relation(fields: [exercise_id], references: [id], onDelete: Cascade)

  @@index([exercise_id])
  @@index([type])
}

model financial_transactions {
  id          String                   @id
  type        FinancialTransactionType
  amount      Decimal                  @db.Decimal(10, 2)
  description String
  date        DateTime
  patient_id  String?
  user_id     String
  category    String?
  created_at  DateTime                 @default(now())
  patients    patients?                @relation(fields: [patient_id], references: [id])
  users       users                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  receipts    receipts?

  @@index([date(sort: Desc)])
  @@index([type])
}

model inventory_items {
  id              String           @id
  name            String
  description     String?
  quantity        Int
  min_stock_level Int
  max_stock_level Int?
  unit            String
  unit_cost       Decimal?         @db.Decimal(10, 2)
  location        String?
  expiry_date     DateTime?
  created_at      DateTime         @default(now())
  updated_at      DateTime
  inventory_logs  inventory_logs[]
}

model inventory_logs {
  id              String          @id
  item_id         String
  change          Int
  reason          String
  user_id         String
  created_at      DateTime        @default(now())
  inventory_items inventory_items @relation(fields: [item_id], references: [id], onDelete: Cascade)
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([item_id])
}

model marketing_automations {
  id               String         @id
  type             AutomationType
  name             String
  description      String?
  enabled          Boolean        @default(true)
  template_message String
  trigger          Json
  last_run         DateTime?
  created_at       DateTime       @default(now())
  updated_at       DateTime
}

model metric_results {
  id          String   @id
  patient_id  String
  metric_name String
  value       Float
  unit        String
  measured_at DateTime @default(now())
  patients    patients @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([measured_at(sort: Desc)])
  @@index([patient_id])
}

model pain_points {
  id          String   @id
  patient_id  String
  x_position  Float
  y_position  Float
  intensity   Int      @db.SmallInt
  type        PainType
  description String?
  body_part   BodyPart
  created_at  DateTime @default(now())
  patients    patients @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([patient_id])
}

model pathologies {
  id                  String                @id
  name                String                @unique
  description         String?
  symptoms            String[]
  causes              String[]
  icd10_code          String?
  created_at          DateTime              @default(now())
  updated_at          DateTime
  treatment_protocols treatment_protocols[]
}

model patients {
  id                     String                   @id
  name                   String
  cpf                    String                   @unique
  email                  String?
  phone                  String?
  birth_date             DateTime?
  address                Json?
  emergency_contact      Json?
  status                 PatientStatus            @default(Active)
  last_visit             DateTime?
  allergies              String?
  medical_alerts         String?
  consent_given          Boolean                  @default(false)
  whatsapp_consent       WhatsAppConsent          @default(opt_out)
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  appointments           appointments[]
  assessment_results     assessment_results[]
  communication_logs     communication_logs[]
  financial_transactions financial_transactions[]
  metric_results         metric_results[]
  pain_points            pain_points[]
  payments               payments[]
  receipts               receipts[]
  whatsapp_logs          whatsapp_logs[]
  telemedicine_sessions  telemedicine_sessions[]
}

model payments {
  id             String        @id
  appointment_id String?
  patient_id     String
  amount         Decimal       @db.Decimal(10, 2)
  status         PaymentStatus @default(pending)
  method         PaymentMethod @default(cash)
  description    String?
  due_date       DateTime?
  paid_at        DateTime?
  created_at     DateTime      @default(now())
  updated_at     DateTime
  patients       patients      @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([created_at(sort: Desc)])
  @@index([patient_id])
  @@index([status])
}

model professional_payouts {
  id              String       @id
  professional_id String
  period          String
  base_amount     Decimal      @db.Decimal(10, 2)
  commission_rate Decimal      @db.Decimal(5, 4)
  gross_amount    Decimal      @db.Decimal(10, 2)
  deductions      Decimal      @default(0) @db.Decimal(10, 2)
  net_amount      Decimal      @db.Decimal(10, 2)
  status          PayoutStatus @default(pending)
  paid_at         DateTime?
  created_at      DateTime     @default(now())
  users           users        @relation(fields: [professional_id], references: [id], onDelete: Cascade)

  @@unique([professional_id, period])
}

model real_time_metrics {
  id          String             @id
  metric_type RealTimeMetricType
  value       Float
  metadata    Json?
  timestamp   DateTime           @default(now())

  @@index([metric_type])
  @@index([timestamp(sort: Desc)])
}

model receipts {
  id                     String                 @id
  receipt_number         String                 @unique @db.VarChar(50)
  transaction_id         String                 @unique
  patient_id             String
  amount                 Decimal                @db.Decimal(10, 2)
  description            String
  service_date           DateTime
  payment_method         PaymentMethod
  notes                  String?
  items                  Json?
  issued_by              String
  created_at             DateTime               @default(now())
  updated_at             DateTime
  users                  users                  @relation(fields: [issued_by], references: [id], onDelete: Cascade)
  patients               patients               @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  financial_transactions financial_transactions @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([patient_id])
  @@index([receipt_number])
  @@index([service_date])
}

model session_metrics {
  id            String    @id
  session_id    String
  user_id       String?
  start_time    DateTime
  end_time      DateTime?
  duration      Int?
  page_views    Int       @default(0)
  interactions  Int       @default(0)
  device_type   String?
  browser_agent String?
  created_at    DateTime  @default(now())
  users         users?    @relation(fields: [user_id], references: [id])

  @@index([session_id])
  @@index([start_time(sort: Desc)])
  @@index([user_id])
}

model soap_notes {
  id             String       @id
  appointment_id String
  subjective     String?
  objective      String?
  assessment     String?
  plan           String?
  created_at     DateTime     @default(now())
  appointments   appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
}

model standardized_assessments {
  id                 String               @id
  name               String               @unique
  description        String?
  type               AssessmentType
  category           String
  json_fields        Json
  scoring_rules      Json
  norm_values        Json?
  is_active          Boolean              @default(true)
  created_at         DateTime             @default(now())
  updated_at         DateTime
  assessment_results assessment_results[]
}

model treatment_protocol_exercises {
  id                   String              @id
  protocol_id          String
  exercise_id          String
  order                Int                 @db.SmallInt
  sets                 Int?                @db.SmallInt
  repetitions          String?
  rest_time            String?
  resistance_level     String?
  progression_criteria String?
  notes                String?
  created_at           DateTime            @default(now())
  exercises            exercises           @relation(fields: [exercise_id], references: [id], onDelete: Cascade)
  treatment_protocols  treatment_protocols @relation(fields: [protocol_id], references: [id], onDelete: Cascade)

  @@unique([protocol_id, exercise_id])
}

model treatment_protocols {
  id                           String                         @id
  name                         String
  description                  String?
  pathology_id                 String
  frequency                    String
  duration                     String
  objectives                   String[]
  contraindications            String[]
  notes                        String?
  created_by                   String
  is_active                    Boolean                        @default(true)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime
  treatment_protocol_exercises treatment_protocol_exercises[]
  pathologies                  pathologies                    @relation(fields: [pathology_id], references: [id], onDelete: Cascade)
}

model users {
  id                     String                   @id
  name                   String
  email                  String                   @unique
  password_hash          String?
  role                   Role
  avatar_url             String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  analytics_events       analytics_events[]
  appointments           appointments[]
  communication_logs     communication_logs[]
  custom_metrics         custom_metrics[]
  event_registrations    event_registrations[]
  events                 events[]
  exercise_approvals     exercise_approvals[]
  financial_transactions financial_transactions[]
  inventory_logs         inventory_logs[]
  professional_payouts   professional_payouts[]
  receipts               receipts[]
  session_metrics        session_metrics[]
  telemedicine_therapist telemedicine_sessions[] @relation("TelemedicineTherapist")
  telemedicine_participants telemedicine_participants[] @relation("TelemedicineParticipant")
  telemedicine_chat_messages telemedicine_chat_messages[] @relation("TelemedicineChatSender")
  telemedicine_device_tests telemedicine_device_tests[] @relation("TelemedicineDeviceTest")
}

model whatsapp_logs {
  id                  String    @id
  patient_id          String
  message             String
  message_type        String
  status              String
  whatsapp_message_id String?
  error               String?
  sent_at             DateTime
  delivered_at        DateTime?
  read_at             DateTime?
  created_at          DateTime  @default(now())
  patients            patients  @relation(fields: [patient_id], references: [id], onDelete: Cascade)

  @@index([patient_id])
  @@index([sent_at(sort: Desc)])
  @@index([status])
}

model whatsapp_notification_settings {
  id                       Int      @id @default(1)
  appointment_reminder     Boolean  @default(true)
  appointment_confirmation Boolean  @default(true)
  exercise_reminder        Boolean  @default(false)
  follow_up_reminder       Boolean  @default(false)
  reminder_hours           Int      @default(24)
  follow_up_days           Int      @default(7)
  created_at               DateTime @default(now())
  updated_at               DateTime
}

enum AnalyticsEventCategory {
  USER_ACTION
  SYSTEM_EVENT
  PERFORMANCE
  ERROR
  CUSTOM
}

enum AppointmentStatus {
  Agendado
  Realizado
  Concluido
  Cancelado
  Faltou
}

enum AppointmentType {
  Avaliacao
  Sessao
  Retorno
  Pilates
  Urgente
  Teleconsulta
}

enum AssessmentType {
  SCALE
  QUESTIONNAIRE
  FUNCTIONAL_TEST
  MEASUREMENT
}

enum AutomationType {
  NPS
  BIRTHDAY
  INACTIVITY_REMINDER
  APPOINTMENT_REMINDER
  FOLLOW_UP
}

enum BodyPart {
  front
  back
}

enum CheckInMethod {
  qr
  manual
}

enum CommunicationChannel {
  email
  sms
  whatsapp
  push
}

enum CommunicationType {
  WhatsApp
  Ligacao
  Email
  Outro
}

enum DailyAggregationType {
  APPOINTMENTS
  REVENUE
  USERS
  SESSIONS
  PAGE_VIEWS
  CUSTOM
}

enum EventCertificateType {
  participation
  collaboration
}

enum EventProviderStatus {
  applied
  confirmed
  paid
  cancelled
}

enum EventRegistrationStatus {
  pending
  confirmed
  attended
  cancelled
}

enum EventResourceStatus {
  requested
  confirmed
  unavailable
}

enum EventResourceType {
  sala
  equipamento
  material
}

enum EventStatus {
  draft
  published
  active
  completed
  cancelled
}

enum EventType {
  corrida
  workshop
  palestra
  campanha
  atendimento
}

enum ExerciseStatus {
  approved
  pending_approval
}

enum FinancialTransactionType {
  INCOME
  EXPENSE
}

enum PainType {
  latejante
  aguda
  queimacao
  formigamento
  cansaco
}

enum PatientStatus {
  Active
  Inactive
  Discharged
}

enum PaymentMethod {
  cash
  credit_card
  debit_card
  pix
  bank_transfer
  insurance
}

enum PaymentStatus {
  paid
  pending
}

enum PayoutStatus {
  pending
  processing
  paid
  cancelled
}

enum RealTimeMetricType {
  ACTIVE_USERS
  PAGE_VIEWS
  SESSIONS
  RESPONSE_TIME
  ERROR_RATE
  CUSTOM
}

enum Role {
  Admin
  Fisioterapeuta
  Paciente
  EducadorFisico
}

enum WhatsAppConsent {
  opt_in
  opt_out
}

enum ExerciseApprovalStatus {
  pending
  approved
  rejected
  needs_revision
}

enum MediaType {
  image
  video
  thumbnail
  document
}

model telemedicine_sessions {
  id                  String                      @id
  patient_id          String
  therapist_id        String
  session_type        TelemedicineSessionType
  status              TelemedicineSessionStatus   @default(scheduled)
  scheduled_start     DateTime
  actual_start        DateTime?
  actual_end          DateTime?
  duration_minutes    Int
  room_id             String                      @unique
  notes               String?
  session_notes       String?
  patient_feedback    String?
  technical_issues    String[]
  recording_url       String?
  connection_quality  ConnectionQuality?
  requires_recording  Boolean                     @default(false)
  emergency_session   Boolean                     @default(false)
  created_at          DateTime                    @default(now())
  updated_at          DateTime
  patient             patients                    @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  therapist           users                       @relation("TelemedicineTherapist", fields: [therapist_id], references: [id], onDelete: Cascade)
  participants        telemedicine_participants[]
  chat_messages       telemedicine_chat_messages[]
  session_recordings  telemedicine_recordings[]

  @@index([patient_id])
  @@index([therapist_id])
  @@index([scheduled_start])
  @@index([status])
}

model telemedicine_participants {
  id          String                  @id
  session_id  String
  user_id     String
  user_type   TelemedicineUserType
  joined_at   DateTime                @default(now())
  left_at     DateTime?
  device_info Json?
  session     telemedicine_sessions   @relation(fields: [session_id], references: [id], onDelete: Cascade)
  user        users                   @relation("TelemedicineParticipant", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([session_id])
  @@index([user_id])
}

model telemedicine_chat_messages {
  id          String                @id
  session_id  String
  sender_id   String
  sender_type TelemedicineUserType
  message     String
  message_type MessageType          @default(text)
  metadata    Json?
  sent_at     DateTime              @default(now())
  read_at     DateTime?
  session     telemedicine_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
  sender      users                 @relation("TelemedicineChatSender", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([session_id, sent_at])
  @@index([sender_id])
}

model telemedicine_recordings {
  id              String                @id
  session_id      String
  recording_url   String
  duration_seconds Int
  file_size_bytes BigInt?
  recording_type  RecordingType         @default(full_session)
  started_at      DateTime
  ended_at        DateTime
  processed_at    DateTime?
  status          RecordingStatus       @default(processing)
  metadata        Json?
  created_at      DateTime              @default(now())
  session         telemedicine_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([session_id])
  @@index([status])
}

model telemedicine_device_tests {
  id              String   @id
  user_id         String
  test_type       TestType
  camera_working  Boolean?
  mic_working     Boolean?
  speakers_working Boolean?
  bandwidth_mbps  Float?
  latency_ms      Int?
  browser_info    Json?
  test_results    Json?
  tested_at       DateTime @default(now())
  user            users    @relation("TelemedicineDeviceTest", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, tested_at])
}

enum TelemedicineSessionType {
  consultation
  follow_up
  exercise_guidance
  assessment
  emergency
}

enum TelemedicineSessionStatus {
  scheduled
  starting
  active
  paused
  completed
  cancelled
  no_show
  technical_failure
}

enum TelemedicineUserType {
  patient
  therapist
  observer
}

enum ConnectionQuality {
  excellent
  good
  fair
  poor
}

enum MessageType {
  text
  image
  file
  system
  exercise_share
  screen_share
}

enum RecordingType {
  full_session
  screen_only
  audio_only
  highlights
}

enum RecordingStatus {
  processing
  completed
  failed
  archived
}

enum TestType {
  pre_session
  troubleshooting
  routine_check
}
