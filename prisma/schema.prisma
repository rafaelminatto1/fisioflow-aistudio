generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  passwordHash          String?                @map("password_hash")
  role                  Role
  avatarUrl             String?                @map("avatar_url")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  appointments          Appointment[]
  communicationLogs     CommunicationLog[]
  analyticsEvents       AnalyticsEvent[]
  sessionMetrics        SessionMetric[]
  customMetrics         CustomMetric[]
  financialTransactions FinancialTransaction[]
  professionalPayouts   ProfessionalPayout[]
  inventoryLogs         InventoryLog[]
  issuedReceipts        Receipt[]

  organizedEvents        Event[]             @relation("OrganizedEvents")
  checkedInRegistrations EventRegistration[] @relation("CheckedInRegistrations")

  @@map("users")
}

model Patient {
  id                    String                 @id @default(cuid())
  name                  String
  cpf                   String                 @unique
  email                 String?
  phone                 String?
  birthDate             DateTime?              @map("birth_date")
  address               Json?
  emergencyContact      Json?                  @map("emergency_contact")
  status                PatientStatus          @default(Active)
  lastVisit             DateTime?              @map("last_visit")
  allergies             String?
  medicalAlerts         String?                @map("medical_alerts")
  consentGiven          Boolean                @default(false) @map("consent_given")
  whatsappConsent       WhatsAppConsent        @default(opt_out) @map("whatsapp_consent")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  appointments          Appointment[]
  communicationLogs     CommunicationLog[]
  metricResults         MetricResult[]
  painPoints            PainPoint[]
  payments              Payment[]
  assessmentResults     AssessmentResult[]
  financialTransactions FinancialTransaction[]
  receipts              Receipt[]

  @@map("patients")
}

model Appointment {
  id                String             @id @default(cuid())
  patientId         String             @map("patient_id")
  therapistId       String             @map("therapist_id")
  startTime         DateTime           @map("start_time")
  endTime           DateTime           @map("end_time")
  type              AppointmentType
  status            AppointmentStatus  @default(Agendado)
  value             Decimal?           @db.Decimal(10, 2)
  paymentStatus     PaymentStatus      @default(pending) @map("payment_status")
  observations      String?
  seriesId          String?            @map("series_id")
  sessionNumber     Int?               @map("session_number")
  totalSessions     Int?               @map("total_sessions")
  createdAt         DateTime           @default(now()) @map("created_at")
  patient           Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist         User               @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  soapNotes         SoapNote[]
  assessmentResults AssessmentResult[]

  @@index([patientId])
  @@index([therapistId])
  @@index([startTime])
  @@map("appointments")
}

model PainPoint {
  id          String   @id @default(cuid())
  patientId   String   @map("patient_id")
  xPosition   Float    @map("x_position")
  yPosition   Float    @map("y_position")
  intensity   Int      @db.SmallInt
  type        PainType
  description String?
  bodyPart    BodyPart @map("body_part")
  createdAt   DateTime @default(now()) @map("created_at")
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([createdAt(sort: Desc)])
  @@map("pain_points")
}

model MetricResult {
  id         String   @id @default(cuid())
  patientId  String   @map("patient_id")
  metricName String   @map("metric_name")
  value      Float
  unit       String
  measuredAt DateTime @default(now()) @map("measured_at")
  patient    Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([measuredAt(sort: Desc)])
  @@map("metric_results")
}

model SoapNote {
  id            String      @id @default(cuid())
  appointmentId String      @map("appointment_id")
  subjective    String?
  objective     String?
  assessment    String?
  plan          String?
  createdAt     DateTime    @default(now()) @map("created_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("soap_notes")
}

model CommunicationLog {
  id        String            @id @default(cuid())
  patientId String            @map("patient_id")
  userId    String            @map("user_id")
  type      CommunicationType
  notes     String
  createdAt DateTime          @default(now()) @map("created_at")
  patient   Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([createdAt(sort: Desc)])
  @@map("communication_logs")
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String?       @map("appointment_id")
  patientId     String        @map("patient_id")
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(pending)
  method        PaymentMethod @default(cash)
  description   String?
  dueDate       DateTime?     @map("due_date")
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  patient       Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("payments")
}

model AnalyticsEvent {
  id         String                 @id @default(cuid())
  userId     String?                @map("user_id")
  eventType  String                 @map("event_type")
  category   AnalyticsEventCategory
  properties Json?
  sessionId  String?                @map("session_id")
  createdAt  DateTime               @default(now()) @map("created_at")
  user       User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([eventType])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("analytics_events")
}

model SessionMetric {
  id           String    @id @default(cuid())
  sessionId    String    @map("session_id")
  userId       String?   @map("user_id")
  startTime    DateTime  @map("start_time")
  endTime      DateTime? @map("end_time")
  duration     Int? // Duration in seconds
  pageViews    Int       @default(0) @map("page_views")
  interactions Int       @default(0)
  deviceType   String?   @map("device_type")
  browserAgent String?   @map("browser_agent")
  createdAt    DateTime  @default(now()) @map("created_at")
  user         User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([startTime(sort: Desc)])
  @@map("session_metrics")
}

model RealTimeMetric {
  id         String             @id @default(cuid())
  metricType RealTimeMetricType @map("metric_type")
  value      Float
  metadata   Json?
  timestamp  DateTime           @default(now())

  @@index([metricType])
  @@index([timestamp(sort: Desc)])
  @@map("real_time_metrics")
}

model DailyAggregation {
  id              String               @id @default(cuid())
  date            DateTime             @db.Date
  aggregationType DailyAggregationType @map("aggregation_type")
  totalValue      Float                @map("total_value")
  avgValue        Float?               @map("avg_value")
  maxValue        Float?               @map("max_value")
  minValue        Float?               @map("min_value")
  recordCount     Int                  @map("record_count")
  metadata        Json?
  createdAt       DateTime             @default(now()) @map("created_at")

  @@unique([date, aggregationType])
  @@index([date(sort: Desc)])
  @@index([aggregationType])
  @@map("daily_aggregations")
}

model CustomMetric {
  id          String   @id @default(cuid())
  name        String
  description String?
  value       Float
  unit        String?
  category    String?
  tags        Json?
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([name])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("custom_metrics")
}

enum Role {
  Admin
  Fisioterapeuta
  Paciente
  EducadorFisico
}

enum AppointmentType {
  Avaliacao
  Sessao
  Retorno
  Pilates
  Urgente
  Teleconsulta
}

enum AppointmentStatus {
  Agendado
  Realizado
  Concluido
  Cancelado
  Faltou
}

enum PaymentStatus {
  paid
  pending
}

enum PatientStatus {
  Active
  Inactive
  Discharged
}

enum PainType {
  latejante
  aguda
  queimacao
  formigamento
  cansaco
}

enum BodyPart {
  front
  back
}

enum CommunicationType {
  WhatsApp
  Ligacao
  Email
  Outro
}

enum WhatsAppConsent {
  opt_in
  opt_out
}

enum PaymentMethod {
  cash
  credit_card
  debit_card
  pix
  bank_transfer
  insurance
}

enum AnalyticsEventCategory {
  USER_ACTION
  SYSTEM_EVENT
  PERFORMANCE
  ERROR
  CUSTOM
}

enum RealTimeMetricType {
  ACTIVE_USERS
  PAGE_VIEWS
  SESSIONS
  RESPONSE_TIME
  ERROR_RATE
  CUSTOM
}

enum DailyAggregationType {
  APPOINTMENTS
  REVENUE
  USERS
  SESSIONS
  PAGE_VIEWS
  CUSTOM
}

// Clinical Content Library Models

model Pathology {
  id          String              @id @default(cuid())
  name        String              @unique
  description String?
  symptoms    String[] // Array of symptoms
  causes      String[] // Array of causes
  icd10Code   String?             @map("icd10_code")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  protocols   TreatmentProtocol[]

  @@map("pathologies")
}

model Exercise {
  id                String                      @id @default(cuid())
  name              String
  description       String?
  category          String
  subcategory       String?
  bodyParts         String[]                    @map("body_parts")
  difficulty        Int                         @db.SmallInt // 1-5 scale
  equipment         String[]
  instructions      String[]
  videoUrl          String?                     @map("video_url")
  thumbnailUrl      String?                     @map("thumbnail_url")
  duration          Int? // Duration in seconds
  indications       String[]
  contraindications String[]
  modifications     Json? // {easier: string, harder: string}
  status            ExerciseStatus              @default(pending_approval)
  authorId          String?                     @map("author_id")
  createdAt         DateTime                    @default(now()) @map("created_at")
  updatedAt         DateTime                    @updatedAt @map("updated_at")
  protocolExercises TreatmentProtocolExercise[]

  @@map("exercises")
}

model TreatmentProtocol {
  id                String                      @id @default(cuid())
  name              String
  description       String?
  pathologyId       String                      @map("pathology_id")
  frequency         String // e.g., "3x por semana"
  duration          String // e.g., "12 semanas"
  objectives        String[]
  contraindications String[]
  notes             String?
  createdBy         String                      @map("created_by")
  isActive          Boolean                     @default(true) @map("is_active")
  createdAt         DateTime                    @default(now()) @map("created_at")
  updatedAt         DateTime                    @updatedAt @map("updated_at")
  pathology         Pathology                   @relation(fields: [pathologyId], references: [id], onDelete: Cascade)
  exercises         TreatmentProtocolExercise[]

  @@map("treatment_protocols")
}

model TreatmentProtocolExercise {
  id                  String            @id @default(cuid())
  protocolId          String            @map("protocol_id")
  exerciseId          String            @map("exercise_id")
  order               Int               @db.SmallInt
  sets                Int?              @db.SmallInt
  repetitions         String? // Can be "15" or "30s"
  restTime            String?           @map("rest_time") // e.g., "30s"
  resistanceLevel     String?           @map("resistance_level")
  progressionCriteria String?           @map("progression_criteria")
  notes               String?
  createdAt           DateTime          @default(now()) @map("created_at")
  protocol            TreatmentProtocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  exercise            Exercise          @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([protocolId, exerciseId])
  @@map("treatment_protocol_exercises")
}

model StandardizedAssessment {
  id           String             @id @default(cuid())
  name         String             @unique
  description  String?
  type         AssessmentType
  category     String // e.g., "Mobilidade", "Qualidade de vida", "Dor"
  jsonFields   Json               @map("json_fields") // Assessment structure (questions, scales, etc.)
  scoringRules Json               @map("scoring_rules") // Rules for calculating scores
  normValues   Json?              @map("norm_values") // Normal/reference values
  isActive     Boolean            @default(true) @map("is_active")
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  results      AssessmentResult[]

  @@map("standardized_assessments")
}

model AssessmentResult {
  id             String                 @id @default(cuid())
  assessmentId   String                 @map("assessment_id")
  patientId      String                 @map("patient_id")
  appointmentId  String?                @map("appointment_id")
  responses      Json // Patient's responses
  score          Float?
  interpretation String? // e.g., "Normal", "Leve", "Moderado", "Severo"
  notes          String?
  evaluatedBy    String                 @map("evaluated_by") // User ID
  evaluatedAt    DateTime               @default(now()) @map("evaluated_at")
  assessment     StandardizedAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  patient        Patient                @relation(fields: [patientId], references: [id], onDelete: Cascade)
  appointment    Appointment?           @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@index([patientId])
  @@index([evaluatedAt(sort: Desc)])
  @@map("assessment_results")
}

// Financial Module Models

model FinancialTransaction {
  id          String                   @id @default(cuid())
  type        FinancialTransactionType
  amount      Decimal                  @db.Decimal(10, 2)
  description String
  date        DateTime
  patientId   String?                  @map("patient_id")
  userId      String                   @map("user_id")
  category    String?
  createdAt   DateTime                 @default(now()) @map("created_at")
  patient     Patient?                 @relation(fields: [patientId], references: [id], onDelete: SetNull)
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  receipt     Receipt?

  @@index([date(sort: Desc)])
  @@index([type])
  @@map("financial_transactions")
}

model ProfessionalPayout {
  id             String       @id @default(cuid())
  professionalId String       @map("professional_id")
  period         String // e.g., "2024-01"
  baseAmount     Decimal      @map("base_amount") @db.Decimal(10, 2)
  commissionRate Decimal      @map("commission_rate") @db.Decimal(5, 4) // e.g., 0.7000 for 70%
  grossAmount    Decimal      @map("gross_amount") @db.Decimal(10, 2)
  deductions     Decimal      @default(0) @db.Decimal(10, 2)
  netAmount      Decimal      @map("net_amount") @db.Decimal(10, 2)
  status         PayoutStatus @default(pending)
  paidAt         DateTime?    @map("paid_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  professional   User         @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, period])
  @@map("professional_payouts")
}

// Marketing Automation Models

model MarketingAutomation {
  id              String         @id @default(cuid())
  type            AutomationType
  name            String
  description     String?
  enabled         Boolean        @default(true)
  templateMessage String         @map("template_message")
  trigger         Json // Trigger conditions (e.g., {"days_inactive": 90})
  lastRun         DateTime?      @map("last_run")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  @@map("marketing_automations")
}

// Inventory Models

model InventoryItem {
  id            String         @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  minStockLevel Int            @map("min_stock_level")
  maxStockLevel Int?           @map("max_stock_level")
  unit          String
  unitCost      Decimal?       @map("unit_cost") @db.Decimal(10, 2)
  location      String?
  expiryDate    DateTime?      @map("expiry_date")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  movements     InventoryLog[]

  @@map("inventory_items")
}

model InventoryLog {
  id        String        @id @default(cuid())
  itemId    String        @map("item_id")
  change    Int // Positive for additions, negative for subtractions
  reason    String
  userId    String        @map("user_id")
  createdAt DateTime      @default(now()) @map("created_at")
  item      InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([createdAt(sort: Desc)])
  @@map("inventory_logs")
}

// Enums

enum ExerciseStatus {
  approved
  pending_approval
}

enum AssessmentType {
  SCALE
  QUESTIONNAIRE
  FUNCTIONAL_TEST
  MEASUREMENT
}

enum FinancialTransactionType {
  INCOME
  EXPENSE
}

enum PayoutStatus {
  pending
  processing
  paid
  cancelled
}

enum AutomationType {
  NPS
  BIRTHDAY
  INACTIVITY_REMINDER
  APPOINTMENT_REMINDER
  FOLLOW_UP
}

// Event Management Module

enum EventType {
  corrida
  workshop
  palestra
  campanha
  atendimento
}

enum EventStatus {
  draft
  published
  active
  completed
  cancelled
}

enum EventRegistrationStatus {
  pending
  confirmed
  attended
  cancelled
}

enum CheckInMethod {
  qr
  manual
}

enum EventProviderStatus {
  applied
  confirmed
  paid
  cancelled
}

enum EventResourceType {
  sala
  equipamento
  material
}

enum EventResourceStatus {
  requested
  confirmed
  unavailable
}

enum EventCertificateType {
  participation
  collaboration
}

enum CommunicationChannel {
  email
  sms
  whatsapp
  push
}

model Event {
  id                   String      @id @default(cuid())
  name                 String      @db.VarChar(200)
  description          String?     @db.Text
  eventType            EventType   @map("event_type")
  startDate            DateTime    @map("start_date")
  endDate              DateTime    @map("end_date")
  location             String?     @db.VarChar(300)
  address              String?     @db.Text
  capacity             Int?
  isFree               Boolean     @default(true) @map("is_free")
  price                Decimal?    @db.Decimal(10, 2)
  status               EventStatus @default(draft)
  organizerId          String      @map("organizer_id")
  requiresRegistration Boolean     @default(true) @map("requires_registration")
  allowsProviders      Boolean     @default(false) @map("allows_providers")
  whatsappGroup        String?     @map("whatsapp_group") @db.VarChar(500)
  defaultMessage       String?     @map("default_message") @db.Text
  providerRate         Decimal?    @map("provider_rate") @db.Decimal(10, 2)
  bannerUrl            String?     @map("banner_url") @db.VarChar(500)
  images               Json?
  createdAt            DateTime    @default(now()) @map("created_at")
  updatedAt            DateTime    @updatedAt @map("updated_at")

  organizer      User                 @relation("OrganizedEvents", fields: [organizerId], references: [id])
  registrations  EventRegistration[]
  providers      EventProvider[]
  resources      EventResource[]
  certificates   EventCertificate[]
  communications EventCommunication[]

  @@index([organizerId])
  @@index([startDate])
  @@map("events")
}

model EventRegistration {
  id               String                  @id @default(cuid())
  eventId          String                  @map("event_id")
  fullName         String                  @map("full_name") @db.VarChar(200)
  email            String                  @db.VarChar(100)
  phone            String?                 @db.VarChar(20)
  cpf              String?                 @db.VarChar(14)
  birthDate        DateTime?               @map("birth_date") @db.Date
  address          String?                 @db.Text
  instagram        String?                 @db.VarChar(100)
  status           EventRegistrationStatus @default(pending)
  registrationDate DateTime                @default(now()) @map("registration_date")
  qrCode           String?                 @unique @map("qr_code")
  checkedInAt      DateTime?               @map("checked_in_at")
  checkedInById    String?                 @map("checked_in_by_id")
  checkInMethod    CheckInMethod?          @map("check_in_method")
  checkInLocation  String?                 @map("check_in_location") @db.VarChar(200)
  adminNotes       String?                 @map("admin_notes") @db.Text

  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  checkedInBy User?             @relation("CheckedInRegistrations", fields: [checkedInById], references: [id], onDelete: SetNull)
  certificate EventCertificate?

  @@index([eventId])
  @@index([email])
  @@map("event_registrations")
}

model EventProvider {
  id              String              @id @default(cuid())
  eventId         String              @map("event_id")
  name            String              @db.VarChar(200)
  phone           String              @db.VarChar(20)
  professionalId  String?             @map("professional_id") @db.VarChar(50)
  pixKey          String?             @map("pix_key") @db.VarChar(200)
  hourlyRate      Decimal?            @map("hourly_rate") @db.Decimal(10, 2)
  availability    Json?
  status          EventProviderStatus @default(applied)
  applicationDate DateTime            @default(now()) @map("application_date")
  confirmedAt     DateTime?           @map("confirmed_at")
  paymentAmount   Decimal?            @map("payment_amount") @db.Decimal(10, 2)
  paymentDate     DateTime?           @map("payment_date")
  paymentReceipt  String?             @map("payment_receipt") @db.VarChar(500)
  adminNotes      String?             @map("admin_notes") @db.Text

  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  certificate EventCertificate?

  @@index([eventId])
  @@index([phone])
  @@map("event_providers")
}

model EventResource {
  id             String              @id @default(cuid())
  eventId        String              @map("event_id")
  resourceName   String              @map("resource_name") @db.VarChar(200)
  resourceType   EventResourceType   @map("resource_type")
  quantityNeeded Int?                @map("quantity_needed")
  startTime      DateTime?           @map("start_time")
  endTime        DateTime?           @map("end_time")
  status         EventResourceStatus @default(requested)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@map("event_resources")
}

model EventCertificate {
  id              String               @id @default(cuid())
  eventId         String               @map("event_id")
  registrationId  String?              @unique @map("registration_id")
  providerId      String?              @unique @map("provider_id")
  certificateType EventCertificateType @map("certificate_type")
  certificateCode String               @unique @map("certificate_code") @db.VarChar(50)
  issuedAt        DateTime             @default(now()) @map("issued_at")
  viewCount       Int                  @default(0) @map("view_count")

  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registration EventRegistration? @relation(fields: [registrationId], references: [id], onDelete: SetNull)
  provider     EventProvider?     @relation(fields: [providerId], references: [id], onDelete: SetNull)

  @@index([eventId])
  @@map("event_certificates")
}

model EventCommunication {
  id              String               @id @default(cuid())
  eventId         String               @map("event_id")
  campaignName    String               @map("campaign_name") @db.VarChar(200)
  message         String               @db.Text
  channel         CommunicationChannel
  targetAudience  Json?                @map("target_audience")
  scheduledAt     DateTime?            @map("scheduled_at")
  sentAt          DateTime?            @map("sent_at")
  recipientsCount Int?                 @map("recipients_count")
  deliveredCount  Int?                 @map("delivered_count")
  openedCount     Int?                 @map("opened_count")
  clickedCount    Int?                 @map("clicked_count")

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@map("event_communications")
}

model Receipt {
  id            String        @id @default(cuid())
  receiptNumber String        @unique @map("receipt_number") @db.VarChar(50)
  transactionId String        @unique @map("transaction_id")
  patientId     String        @map("patient_id")
  amount        Decimal       @db.Decimal(10, 2)
  description   String        @db.Text
  serviceDate   DateTime      @map("service_date")
  paymentMethod PaymentMethod @map("payment_method")
  notes         String?       @db.Text
  items         Json?         // JSON array of receipt items
  issuedBy      String        @map("issued_by")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  transaction FinancialTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  patient     Patient              @relation(fields: [patientId], references: [id], onDelete: Cascade)
  issuer      User                 @relation(fields: [issuedBy], references: [id], onDelete: Cascade)

  @@index([receiptNumber])
  @@index([patientId])
  @@index([serviceDate])
  @@map("receipts")
}
