generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  passwordHash      String?            @map("password_hash")
  role              Role
  avatarUrl         String?            @map("avatar_url")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  appointments      Appointment[]
  communicationLogs CommunicationLog[]
  analyticsEvents   AnalyticsEvent[]
  sessionMetrics    SessionMetric[]
  customMetrics     CustomMetric[]

  @@map("users")
}

model Patient {
  id                String             @id @default(cuid())
  name              String
  cpf               String             @unique
  email             String?
  phone             String?
  birthDate         DateTime?          @map("birth_date")
  address           Json?
  emergencyContact  Json?              @map("emergency_contact")
  status            PatientStatus      @default(Active)
  lastVisit         DateTime?          @map("last_visit")
  allergies         String?
  medicalAlerts     String?            @map("medical_alerts")
  consentGiven      Boolean            @default(false) @map("consent_given")
  whatsappConsent   WhatsAppConsent    @default(opt_out) @map("whatsapp_consent")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  appointments      Appointment[]
  communicationLogs CommunicationLog[]
  metricResults     MetricResult[]
  painPoints        PainPoint[]
  payments          Payment[]

  @@map("patients")
}

model Appointment {
  id            String            @id @default(cuid())
  patientId     String            @map("patient_id")
  therapistId   String            @map("therapist_id")
  startTime     DateTime          @map("start_time")
  endTime       DateTime          @map("end_time")
  type          AppointmentType
  status        AppointmentStatus @default(Agendado)
  value         Decimal?          @db.Decimal(10, 2)
  paymentStatus PaymentStatus     @default(pending) @map("payment_status")
  observations  String?
  seriesId      String?           @map("series_id")
  sessionNumber Int?              @map("session_number")
  totalSessions Int?              @map("total_sessions")
  createdAt     DateTime          @default(now()) @map("created_at")
  patient       Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  therapist     User              @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  soapNotes     SoapNote[]

  @@index([patientId])
  @@index([therapistId])
  @@index([startTime])
  @@map("appointments")
}

model PainPoint {
  id          String   @id @default(cuid())
  patientId   String   @map("patient_id")
  xPosition   Float    @map("x_position")
  yPosition   Float    @map("y_position")
  intensity   Int      @db.SmallInt
  type        PainType
  description String?
  bodyPart    BodyPart @map("body_part")
  createdAt   DateTime @default(now()) @map("created_at")
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([createdAt(sort: Desc)])
  @@map("pain_points")
}

model MetricResult {
  id         String   @id @default(cuid())
  patientId  String   @map("patient_id")
  metricName String   @map("metric_name")
  value      Float
  unit       String
  measuredAt DateTime @default(now()) @map("measured_at")
  patient    Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([measuredAt(sort: Desc)])
  @@map("metric_results")
}

model SoapNote {
  id            String      @id @default(cuid())
  appointmentId String      @map("appointment_id")
  subjective    String?
  objective     String?
  assessment    String?
  plan          String?
  createdAt     DateTime    @default(now()) @map("created_at")
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("soap_notes")
}

model CommunicationLog {
  id        String            @id @default(cuid())
  patientId String            @map("patient_id")
  userId    String            @map("user_id")
  type      CommunicationType
  notes     String
  createdAt DateTime          @default(now()) @map("created_at")
  patient   Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([createdAt(sort: Desc)])
  @@map("communication_logs")
}

model Payment {
  id            String        @id @default(cuid())
  appointmentId String?       @map("appointment_id")
  patientId     String        @map("patient_id")
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(pending)
  method        PaymentMethod @default(cash)
  description   String?
  dueDate       DateTime?     @map("due_date")
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  patient       Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("payments")
}

model AnalyticsEvent {
  id         String                 @id @default(cuid())
  userId     String?                @map("user_id")
  eventType  String                 @map("event_type")
  category   AnalyticsEventCategory
  properties Json?
  sessionId  String?                @map("session_id")
  createdAt  DateTime               @default(now()) @map("created_at")
  user       User?                  @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([eventType])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("analytics_events")
}

model SessionMetric {
  id            String   @id @default(cuid())
  sessionId     String   @map("session_id")
  userId        String?  @map("user_id")
  startTime     DateTime @map("start_time")
  endTime       DateTime? @map("end_time")
  duration      Int?     // Duration in seconds
  pageViews     Int      @default(0) @map("page_views")
  interactions  Int      @default(0)
  deviceType    String?  @map("device_type")
  browserAgent  String?  @map("browser_agent")
  createdAt     DateTime @default(now()) @map("created_at")
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([startTime(sort: Desc)])
  @@map("session_metrics")
}

model RealTimeMetric {
  id           String             @id @default(cuid())
  metricType   RealTimeMetricType @map("metric_type")
  value        Float
  metadata     Json?
  timestamp    DateTime           @default(now())

  @@index([metricType])
  @@index([timestamp(sort: Desc)])
  @@map("real_time_metrics")
}

model DailyAggregation {
  id               String                  @id @default(cuid())
  date             DateTime                @db.Date
  aggregationType  DailyAggregationType    @map("aggregation_type")
  totalValue       Float                   @map("total_value")
  avgValue         Float?                  @map("avg_value")
  maxValue         Float?                  @map("max_value")
  minValue         Float?                  @map("min_value")
  recordCount      Int                     @map("record_count")
  metadata         Json?
  createdAt        DateTime                @default(now()) @map("created_at")

  @@unique([date, aggregationType])
  @@index([date(sort: Desc)])
  @@index([aggregationType])
  @@map("daily_aggregations")
}

model CustomMetric {
  id          String   @id @default(cuid())
  name        String
  description String?
  value       Float
  unit        String?
  category    String?
  tags        Json?
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([name])
  @@index([category])
  @@index([createdAt(sort: Desc)])
  @@map("custom_metrics")
}

enum Role {
  Admin
  Fisioterapeuta
  Paciente
  EducadorFisico
}

enum AppointmentType {
  Avaliacao
  Sessao
  Retorno
  Pilates
  Urgente
  Teleconsulta
}

enum AppointmentStatus {
  Agendado
  Realizado
  Concluido
  Cancelado
  Faltou
}

enum PaymentStatus {
  paid
  pending
}

enum PatientStatus {
  Active
  Inactive
  Discharged
}

enum PainType {
  latejante
  aguda
  queimacao
  formigamento
  cansaco
}

enum BodyPart {
  front
  back
}

enum CommunicationType {
  WhatsApp
  Ligacao
  Email
  Outro
}

enum WhatsAppConsent {
  opt_in
  opt_out
}

enum PaymentMethod {
  cash
  credit_card
  debit_card
  pix
  bank_transfer
  insurance
}

enum AnalyticsEventCategory {
  USER_ACTION
  SYSTEM_EVENT
  PERFORMANCE
  ERROR
  CUSTOM
}

enum RealTimeMetricType {
  ACTIVE_USERS
  PAGE_VIEWS
  SESSIONS
  RESPONSE_TIME
  ERROR_RATE
  CUSTOM
}

enum DailyAggregationType {
  APPOINTMENTS
  REVENUE
  USERS
  SESSIONS
  PAGE_VIEWS
  CUSTOM
}
